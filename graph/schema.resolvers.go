package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"
	"mybanks-api/ent"
	"mybanks-api/graph/model"
	"strconv"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Banks is the resolver for the banks field.
func (r *queryResolver) Banks(ctx context.Context, after *string, first *int32, before *string, last *int32, where *model.BankWhereInput) (*model.BankConnection, error) {
	banks, err := r.Client.Bank.Query().WithOffers().WithCurrencyRates().All(ctx)
	if err != nil {
		return nil, err
	}

	var edges []*model.BankEdge
	for _, bank := range banks {
		edges = append(edges, &model.BankEdge{
			Node:   MapBank(bank), // Используем маппер
			Cursor: strconv.Itoa(bank.ID),
		})
	}

	return &model.BankConnection{
		Edges: edges,
		PageInfo: &model.PageInfo{
			HasNextPage:     false,
			HasPreviousPage: false,
			StartCursor:     nil,
			EndCursor:       nil,
		},
	}, nil
}

// CurrencyRates is the resolver for the currencyRates field.
func (r *queryResolver) CurrencyRates(ctx context.Context) ([]*model.CurrencyRate, error) {
	panic(fmt.Errorf("not implemented: CurrencyRates - currencyRates"))
}

// Offers is the resolver for the offers field.
func (r *queryResolver) Offers(ctx context.Context) ([]*model.Offer, error) {
	panic(fmt.Errorf("not implemented: Offers - offers"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
