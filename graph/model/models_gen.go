// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// BankWhereInput is used for filtering Bank objects.
// Input was generated by ent.
type BankWhereInput struct {
	Not *BankWhereInput   `json:"not,omitempty"`
	And []*BankWhereInput `json:"and,omitempty"`
	Or  []*BankWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// name field predicates
	Name             *string  `json:"name,omitempty"`
	NameNeq          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGt           *string  `json:"nameGT,omitempty"`
	NameGte          *string  `json:"nameGTE,omitempty"`
	NameLt           *string  `json:"nameLT,omitempty"`
	NameLte          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`
	// country field predicates
	Country             *string  `json:"country,omitempty"`
	CountryNeq          *string  `json:"countryNEQ,omitempty"`
	CountryIn           []string `json:"countryIn,omitempty"`
	CountryNotIn        []string `json:"countryNotIn,omitempty"`
	CountryGt           *string  `json:"countryGT,omitempty"`
	CountryGte          *string  `json:"countryGTE,omitempty"`
	CountryLt           *string  `json:"countryLT,omitempty"`
	CountryLte          *string  `json:"countryLTE,omitempty"`
	CountryContains     *string  `json:"countryContains,omitempty"`
	CountryHasPrefix    *string  `json:"countryHasPrefix,omitempty"`
	CountryHasSuffix    *string  `json:"countryHasSuffix,omitempty"`
	CountryEqualFold    *string  `json:"countryEqualFold,omitempty"`
	CountryContainsFold *string  `json:"countryContainsFold,omitempty"`
	// website field predicates
	Website             *string  `json:"website,omitempty"`
	WebsiteNeq          *string  `json:"websiteNEQ,omitempty"`
	WebsiteIn           []string `json:"websiteIn,omitempty"`
	WebsiteNotIn        []string `json:"websiteNotIn,omitempty"`
	WebsiteGt           *string  `json:"websiteGT,omitempty"`
	WebsiteGte          *string  `json:"websiteGTE,omitempty"`
	WebsiteLt           *string  `json:"websiteLT,omitempty"`
	WebsiteLte          *string  `json:"websiteLTE,omitempty"`
	WebsiteContains     *string  `json:"websiteContains,omitempty"`
	WebsiteHasPrefix    *string  `json:"websiteHasPrefix,omitempty"`
	WebsiteHasSuffix    *string  `json:"websiteHasSuffix,omitempty"`
	WebsiteIsNil        *bool    `json:"websiteIsNil,omitempty"`
	WebsiteNotNil       *bool    `json:"websiteNotNil,omitempty"`
	WebsiteEqualFold    *string  `json:"websiteEqualFold,omitempty"`
	WebsiteContainsFold *string  `json:"websiteContainsFold,omitempty"`
	// logo_url field predicates
	LogoURL             *string  `json:"logoURL,omitempty"`
	LogoURLNeq          *string  `json:"logoURLNEQ,omitempty"`
	LogoURLIn           []string `json:"logoURLIn,omitempty"`
	LogoURLNotIn        []string `json:"logoURLNotIn,omitempty"`
	LogoURLGt           *string  `json:"logoURLGT,omitempty"`
	LogoURLGte          *string  `json:"logoURLGTE,omitempty"`
	LogoURLLt           *string  `json:"logoURLLT,omitempty"`
	LogoURLLte          *string  `json:"logoURLLTE,omitempty"`
	LogoURLContains     *string  `json:"logoURLContains,omitempty"`
	LogoURLHasPrefix    *string  `json:"logoURLHasPrefix,omitempty"`
	LogoURLHasSuffix    *string  `json:"logoURLHasSuffix,omitempty"`
	LogoURLIsNil        *bool    `json:"logoURLIsNil,omitempty"`
	LogoURLNotNil       *bool    `json:"logoURLNotNil,omitempty"`
	LogoURLEqualFold    *string  `json:"logoURLEqualFold,omitempty"`
	LogoURLContainsFold *string  `json:"logoURLContainsFold,omitempty"`
	// currency_rates edge predicates
	HasCurrencyRates     *bool                     `json:"hasCurrencyRates,omitempty"`
	HasCurrencyRatesWith []*CurrencyRateWhereInput `json:"hasCurrencyRatesWith,omitempty"`
	// offers edge predicates
	HasOffers     *bool              `json:"hasOffers,omitempty"`
	HasOffersWith []*OfferWhereInput `json:"hasOffersWith,omitempty"`
}

// CreateBankInput is used for create Bank object.
// Input was generated by ent.
type CreateBankInput struct {
	Name            string   `json:"name"`
	Country         string   `json:"country"`
	Website         *string  `json:"website,omitempty"`
	LogoURL         *string  `json:"logoURL,omitempty"`
	CurrencyRateIDs []string `json:"currencyRateIDs,omitempty"`
	OfferIDs        []string `json:"offerIDs,omitempty"`
}

// CreateCurrencyRateInput is used for create CurrencyRate object.
// Input was generated by ent.
type CreateCurrencyRateInput struct {
	// ISO 4217 currency code
	Currency string  `json:"currency"`
	Rate     float64 `json:"rate"`
	BankID   string  `json:"bankID"`
}

// CreateOfferInput is used for create Offer object.
// Input was generated by ent.
type CreateOfferInput struct {
	Type        string `json:"type"`
	Description string `json:"description"`
	Link        string `json:"link"`
	BankID      string `json:"bankID"`
}

// CurrencyRateWhereInput is used for filtering CurrencyRate objects.
// Input was generated by ent.
type CurrencyRateWhereInput struct {
	Not *CurrencyRateWhereInput   `json:"not,omitempty"`
	And []*CurrencyRateWhereInput `json:"and,omitempty"`
	Or  []*CurrencyRateWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// currency field predicates
	Currency             *string  `json:"currency,omitempty"`
	CurrencyNeq          *string  `json:"currencyNEQ,omitempty"`
	CurrencyIn           []string `json:"currencyIn,omitempty"`
	CurrencyNotIn        []string `json:"currencyNotIn,omitempty"`
	CurrencyGt           *string  `json:"currencyGT,omitempty"`
	CurrencyGte          *string  `json:"currencyGTE,omitempty"`
	CurrencyLt           *string  `json:"currencyLT,omitempty"`
	CurrencyLte          *string  `json:"currencyLTE,omitempty"`
	CurrencyContains     *string  `json:"currencyContains,omitempty"`
	CurrencyHasPrefix    *string  `json:"currencyHasPrefix,omitempty"`
	CurrencyHasSuffix    *string  `json:"currencyHasSuffix,omitempty"`
	CurrencyEqualFold    *string  `json:"currencyEqualFold,omitempty"`
	CurrencyContainsFold *string  `json:"currencyContainsFold,omitempty"`
	// rate field predicates
	Rate      *float64  `json:"rate,omitempty"`
	RateNeq   *float64  `json:"rateNEQ,omitempty"`
	RateIn    []float64 `json:"rateIn,omitempty"`
	RateNotIn []float64 `json:"rateNotIn,omitempty"`
	RateGt    *float64  `json:"rateGT,omitempty"`
	RateGte   *float64  `json:"rateGTE,omitempty"`
	RateLt    *float64  `json:"rateLT,omitempty"`
	RateLte   *float64  `json:"rateLTE,omitempty"`
	// bank edge predicates
	HasBank     *bool             `json:"hasBank,omitempty"`
	HasBankWith []*BankWhereInput `json:"hasBankWith,omitempty"`
}

// OfferWhereInput is used for filtering Offer objects.
// Input was generated by ent.
type OfferWhereInput struct {
	Not *OfferWhereInput   `json:"not,omitempty"`
	And []*OfferWhereInput `json:"and,omitempty"`
	Or  []*OfferWhereInput `json:"or,omitempty"`
	// id field predicates
	ID      *string  `json:"id,omitempty"`
	IDNeq   *string  `json:"idNEQ,omitempty"`
	IDIn    []string `json:"idIn,omitempty"`
	IDNotIn []string `json:"idNotIn,omitempty"`
	IDGt    *string  `json:"idGT,omitempty"`
	IDGte   *string  `json:"idGTE,omitempty"`
	IDLt    *string  `json:"idLT,omitempty"`
	IDLte   *string  `json:"idLTE,omitempty"`
	// type field predicates
	Type             *string  `json:"type,omitempty"`
	TypeNeq          *string  `json:"typeNEQ,omitempty"`
	TypeIn           []string `json:"typeIn,omitempty"`
	TypeNotIn        []string `json:"typeNotIn,omitempty"`
	TypeGt           *string  `json:"typeGT,omitempty"`
	TypeGte          *string  `json:"typeGTE,omitempty"`
	TypeLt           *string  `json:"typeLT,omitempty"`
	TypeLte          *string  `json:"typeLTE,omitempty"`
	TypeContains     *string  `json:"typeContains,omitempty"`
	TypeHasPrefix    *string  `json:"typeHasPrefix,omitempty"`
	TypeHasSuffix    *string  `json:"typeHasSuffix,omitempty"`
	TypeEqualFold    *string  `json:"typeEqualFold,omitempty"`
	TypeContainsFold *string  `json:"typeContainsFold,omitempty"`
	// description field predicates
	Description             *string  `json:"description,omitempty"`
	DescriptionNeq          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGt           *string  `json:"descriptionGT,omitempty"`
	DescriptionGte          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLt           *string  `json:"descriptionLT,omitempty"`
	DescriptionLte          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`
	// link field predicates
	Link             *string  `json:"link,omitempty"`
	LinkNeq          *string  `json:"linkNEQ,omitempty"`
	LinkIn           []string `json:"linkIn,omitempty"`
	LinkNotIn        []string `json:"linkNotIn,omitempty"`
	LinkGt           *string  `json:"linkGT,omitempty"`
	LinkGte          *string  `json:"linkGTE,omitempty"`
	LinkLt           *string  `json:"linkLT,omitempty"`
	LinkLte          *string  `json:"linkLTE,omitempty"`
	LinkContains     *string  `json:"linkContains,omitempty"`
	LinkHasPrefix    *string  `json:"linkHasPrefix,omitempty"`
	LinkHasSuffix    *string  `json:"linkHasSuffix,omitempty"`
	LinkEqualFold    *string  `json:"linkEqualFold,omitempty"`
	LinkContainsFold *string  `json:"linkContainsFold,omitempty"`
	// bank edge predicates
	HasBank     *bool             `json:"hasBank,omitempty"`
	HasBankWith []*BankWhereInput `json:"hasBankWith,omitempty"`
}

type Query struct {
}

// UpdateBankInput is used for update Bank object.
// Input was generated by ent.
type UpdateBankInput struct {
	Name                  *string  `json:"name,omitempty"`
	Country               *string  `json:"country,omitempty"`
	Website               *string  `json:"website,omitempty"`
	ClearWebsite          *bool    `json:"clearWebsite,omitempty"`
	LogoURL               *string  `json:"logoURL,omitempty"`
	ClearLogoURL          *bool    `json:"clearLogoURL,omitempty"`
	AddCurrencyRateIDs    []string `json:"addCurrencyRateIDs,omitempty"`
	RemoveCurrencyRateIDs []string `json:"removeCurrencyRateIDs,omitempty"`
	ClearCurrencyRates    *bool    `json:"clearCurrencyRates,omitempty"`
	AddOfferIDs           []string `json:"addOfferIDs,omitempty"`
	RemoveOfferIDs        []string `json:"removeOfferIDs,omitempty"`
	ClearOffers           *bool    `json:"clearOffers,omitempty"`
}

// UpdateCurrencyRateInput is used for update CurrencyRate object.
// Input was generated by ent.
type UpdateCurrencyRateInput struct {
	// ISO 4217 currency code
	Currency *string  `json:"currency,omitempty"`
	Rate     *float64 `json:"rate,omitempty"`
	BankID   *string  `json:"bankID,omitempty"`
}

// UpdateOfferInput is used for update Offer object.
// Input was generated by ent.
type UpdateOfferInput struct {
	Type        *string `json:"type,omitempty"`
	Description *string `json:"description,omitempty"`
	Link        *string `json:"link,omitempty"`
	BankID      *string `json:"bankID,omitempty"`
}

// Possible directions in which to order a list of items when provided an `orderBy` argument.
type OrderDirection string

const (
	// Specifies an ascending order for a given `orderBy` argument.
	OrderDirectionAsc OrderDirection = "ASC"
	// Specifies a descending order for a given `orderBy` argument.
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
