directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Bank implements Node {
  id: ID!
  name: String!
  country: String!
  website: String
  logoURL: String
  currencyRates: [CurrencyRate!]
  offers: [Offer!]
}
"""
A connection to a list of items.
"""
type BankConnection {
  """
  A list of edges.
  """
  edges: [BankEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type BankEdge {
  """
  The item at the end of the edge.
  """
  node: Bank
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
BankWhereInput is used for filtering Bank objects.
Input was generated by ent.
"""
input BankWhereInput {
  not: BankWhereInput
  and: [BankWhereInput!]
  or: [BankWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  country field predicates
  """
  country: String
  countryNEQ: String
  countryIn: [String!]
  countryNotIn: [String!]
  countryGT: String
  countryGTE: String
  countryLT: String
  countryLTE: String
  countryContains: String
  countryHasPrefix: String
  countryHasSuffix: String
  countryEqualFold: String
  countryContainsFold: String
  """
  website field predicates
  """
  website: String
  websiteNEQ: String
  websiteIn: [String!]
  websiteNotIn: [String!]
  websiteGT: String
  websiteGTE: String
  websiteLT: String
  websiteLTE: String
  websiteContains: String
  websiteHasPrefix: String
  websiteHasSuffix: String
  websiteIsNil: Boolean
  websiteNotNil: Boolean
  websiteEqualFold: String
  websiteContainsFold: String
  """
  logo_url field predicates
  """
  logoURL: String
  logoURLNEQ: String
  logoURLIn: [String!]
  logoURLNotIn: [String!]
  logoURLGT: String
  logoURLGTE: String
  logoURLLT: String
  logoURLLTE: String
  logoURLContains: String
  logoURLHasPrefix: String
  logoURLHasSuffix: String
  logoURLIsNil: Boolean
  logoURLNotNil: Boolean
  logoURLEqualFold: String
  logoURLContainsFold: String
  """
  currency_rates edge predicates
  """
  hasCurrencyRates: Boolean
  hasCurrencyRatesWith: [CurrencyRateWhereInput!]
  """
  offers edge predicates
  """
  hasOffers: Boolean
  hasOffersWith: [OfferWhereInput!]
}
"""
CreateBankInput is used for create Bank object.
Input was generated by ent.
"""
input CreateBankInput {
  name: String!
  country: String!
  website: String
  logoURL: String
  currencyRateIDs: [ID!]
  offerIDs: [ID!]
}
"""
CreateCurrencyRateInput is used for create CurrencyRate object.
Input was generated by ent.
"""
input CreateCurrencyRateInput {
  """
  ISO 4217 currency code
  """
  currency: String!
  rate: Float!
  bankID: ID!
}
"""
CreateOfferInput is used for create Offer object.
Input was generated by ent.
"""
input CreateOfferInput {
  type: String!
  description: String!
  link: String!
  bankID: ID!
}
type CurrencyRate implements Node {
  id: ID!
  """
  ISO 4217 currency code
  """
  currency: String!
  rate: Float!
  bank: Bank!
}
"""
CurrencyRateWhereInput is used for filtering CurrencyRate objects.
Input was generated by ent.
"""
input CurrencyRateWhereInput {
  not: CurrencyRateWhereInput
  and: [CurrencyRateWhereInput!]
  or: [CurrencyRateWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  currency field predicates
  """
  currency: String
  currencyNEQ: String
  currencyIn: [String!]
  currencyNotIn: [String!]
  currencyGT: String
  currencyGTE: String
  currencyLT: String
  currencyLTE: String
  currencyContains: String
  currencyHasPrefix: String
  currencyHasSuffix: String
  currencyEqualFold: String
  currencyContainsFold: String
  """
  rate field predicates
  """
  rate: Float
  rateNEQ: Float
  rateIn: [Float!]
  rateNotIn: [Float!]
  rateGT: Float
  rateGTE: Float
  rateLT: Float
  rateLTE: Float
  """
  bank edge predicates
  """
  hasBank: Boolean
  hasBankWith: [BankWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "mybanks-api/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type Offer implements Node {
  id: ID!
  type: String!
  description: String!
  link: String!
  bank: Bank!
}
"""
OfferWhereInput is used for filtering Offer objects.
Input was generated by ent.
"""
input OfferWhereInput {
  not: OfferWhereInput
  and: [OfferWhereInput!]
  or: [OfferWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeEqualFold: String
  typeContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  link field predicates
  """
  link: String
  linkNEQ: String
  linkIn: [String!]
  linkNotIn: [String!]
  linkGT: String
  linkGTE: String
  linkLT: String
  linkLTE: String
  linkContains: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkEqualFold: String
  linkContainsFold: String
  """
  bank edge predicates
  """
  hasBank: Boolean
  hasBankWith: [BankWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  banks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Banks returned from the connection.
    """
    where: BankWhereInput
  ): BankConnection!
  currencyRates: [CurrencyRate!]!
  offers: [Offer!]!
}
"""
UpdateBankInput is used for update Bank object.
Input was generated by ent.
"""
input UpdateBankInput {
  name: String
  country: String
  website: String
  clearWebsite: Boolean
  logoURL: String
  clearLogoURL: Boolean
  addCurrencyRateIDs: [ID!]
  removeCurrencyRateIDs: [ID!]
  clearCurrencyRates: Boolean
  addOfferIDs: [ID!]
  removeOfferIDs: [ID!]
  clearOffers: Boolean
}
"""
UpdateCurrencyRateInput is used for update CurrencyRate object.
Input was generated by ent.
"""
input UpdateCurrencyRateInput {
  """
  ISO 4217 currency code
  """
  currency: String
  rate: Float
  bankID: ID
}
"""
UpdateOfferInput is used for update Offer object.
Input was generated by ent.
"""
input UpdateOfferInput {
  type: String
  description: String
  link: String
  bankID: ID
}
