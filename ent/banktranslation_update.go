// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mybanks-api/ent/bank"
	"mybanks-api/ent/banktranslation"
	"mybanks-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BankTranslationUpdate is the builder for updating BankTranslation entities.
type BankTranslationUpdate struct {
	config
	hooks    []Hook
	mutation *BankTranslationMutation
}

// Where appends a list predicates to the BankTranslationUpdate builder.
func (btu *BankTranslationUpdate) Where(ps ...predicate.BankTranslation) *BankTranslationUpdate {
	btu.mutation.Where(ps...)
	return btu
}

// SetBankID sets the "bank_id" field.
func (btu *BankTranslationUpdate) SetBankID(i int) *BankTranslationUpdate {
	btu.mutation.SetBankID(i)
	return btu
}

// SetNillableBankID sets the "bank_id" field if the given value is not nil.
func (btu *BankTranslationUpdate) SetNillableBankID(i *int) *BankTranslationUpdate {
	if i != nil {
		btu.SetBankID(*i)
	}
	return btu
}

// SetLocale sets the "locale" field.
func (btu *BankTranslationUpdate) SetLocale(s string) *BankTranslationUpdate {
	btu.mutation.SetLocale(s)
	return btu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (btu *BankTranslationUpdate) SetNillableLocale(s *string) *BankTranslationUpdate {
	if s != nil {
		btu.SetLocale(*s)
	}
	return btu
}

// SetName sets the "name" field.
func (btu *BankTranslationUpdate) SetName(s string) *BankTranslationUpdate {
	btu.mutation.SetName(s)
	return btu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (btu *BankTranslationUpdate) SetNillableName(s *string) *BankTranslationUpdate {
	if s != nil {
		btu.SetName(*s)
	}
	return btu
}

// SetDescription sets the "description" field.
func (btu *BankTranslationUpdate) SetDescription(s string) *BankTranslationUpdate {
	btu.mutation.SetDescription(s)
	return btu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (btu *BankTranslationUpdate) SetNillableDescription(s *string) *BankTranslationUpdate {
	if s != nil {
		btu.SetDescription(*s)
	}
	return btu
}

// SetBank sets the "bank" edge to the Bank entity.
func (btu *BankTranslationUpdate) SetBank(b *Bank) *BankTranslationUpdate {
	return btu.SetBankID(b.ID)
}

// Mutation returns the BankTranslationMutation object of the builder.
func (btu *BankTranslationUpdate) Mutation() *BankTranslationMutation {
	return btu.mutation
}

// ClearBank clears the "bank" edge to the Bank entity.
func (btu *BankTranslationUpdate) ClearBank() *BankTranslationUpdate {
	btu.mutation.ClearBank()
	return btu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (btu *BankTranslationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, btu.sqlSave, btu.mutation, btu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (btu *BankTranslationUpdate) SaveX(ctx context.Context) int {
	affected, err := btu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (btu *BankTranslationUpdate) Exec(ctx context.Context) error {
	_, err := btu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btu *BankTranslationUpdate) ExecX(ctx context.Context) {
	if err := btu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btu *BankTranslationUpdate) check() error {
	if v, ok := btu.mutation.Locale(); ok {
		if err := banktranslation.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "BankTranslation.locale": %w`, err)}
		}
	}
	if btu.mutation.BankCleared() && len(btu.mutation.BankIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BankTranslation.bank"`)
	}
	return nil
}

func (btu *BankTranslationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := btu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(banktranslation.Table, banktranslation.Columns, sqlgraph.NewFieldSpec(banktranslation.FieldID, field.TypeInt))
	if ps := btu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btu.mutation.Locale(); ok {
		_spec.SetField(banktranslation.FieldLocale, field.TypeString, value)
	}
	if value, ok := btu.mutation.Name(); ok {
		_spec.SetField(banktranslation.FieldName, field.TypeString, value)
	}
	if value, ok := btu.mutation.Description(); ok {
		_spec.SetField(banktranslation.FieldDescription, field.TypeString, value)
	}
	if btu.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banktranslation.BankTable,
			Columns: []string{banktranslation.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btu.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banktranslation.BankTable,
			Columns: []string{banktranslation.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, btu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banktranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	btu.mutation.done = true
	return n, nil
}

// BankTranslationUpdateOne is the builder for updating a single BankTranslation entity.
type BankTranslationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BankTranslationMutation
}

// SetBankID sets the "bank_id" field.
func (btuo *BankTranslationUpdateOne) SetBankID(i int) *BankTranslationUpdateOne {
	btuo.mutation.SetBankID(i)
	return btuo
}

// SetNillableBankID sets the "bank_id" field if the given value is not nil.
func (btuo *BankTranslationUpdateOne) SetNillableBankID(i *int) *BankTranslationUpdateOne {
	if i != nil {
		btuo.SetBankID(*i)
	}
	return btuo
}

// SetLocale sets the "locale" field.
func (btuo *BankTranslationUpdateOne) SetLocale(s string) *BankTranslationUpdateOne {
	btuo.mutation.SetLocale(s)
	return btuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (btuo *BankTranslationUpdateOne) SetNillableLocale(s *string) *BankTranslationUpdateOne {
	if s != nil {
		btuo.SetLocale(*s)
	}
	return btuo
}

// SetName sets the "name" field.
func (btuo *BankTranslationUpdateOne) SetName(s string) *BankTranslationUpdateOne {
	btuo.mutation.SetName(s)
	return btuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (btuo *BankTranslationUpdateOne) SetNillableName(s *string) *BankTranslationUpdateOne {
	if s != nil {
		btuo.SetName(*s)
	}
	return btuo
}

// SetDescription sets the "description" field.
func (btuo *BankTranslationUpdateOne) SetDescription(s string) *BankTranslationUpdateOne {
	btuo.mutation.SetDescription(s)
	return btuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (btuo *BankTranslationUpdateOne) SetNillableDescription(s *string) *BankTranslationUpdateOne {
	if s != nil {
		btuo.SetDescription(*s)
	}
	return btuo
}

// SetBank sets the "bank" edge to the Bank entity.
func (btuo *BankTranslationUpdateOne) SetBank(b *Bank) *BankTranslationUpdateOne {
	return btuo.SetBankID(b.ID)
}

// Mutation returns the BankTranslationMutation object of the builder.
func (btuo *BankTranslationUpdateOne) Mutation() *BankTranslationMutation {
	return btuo.mutation
}

// ClearBank clears the "bank" edge to the Bank entity.
func (btuo *BankTranslationUpdateOne) ClearBank() *BankTranslationUpdateOne {
	btuo.mutation.ClearBank()
	return btuo
}

// Where appends a list predicates to the BankTranslationUpdate builder.
func (btuo *BankTranslationUpdateOne) Where(ps ...predicate.BankTranslation) *BankTranslationUpdateOne {
	btuo.mutation.Where(ps...)
	return btuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (btuo *BankTranslationUpdateOne) Select(field string, fields ...string) *BankTranslationUpdateOne {
	btuo.fields = append([]string{field}, fields...)
	return btuo
}

// Save executes the query and returns the updated BankTranslation entity.
func (btuo *BankTranslationUpdateOne) Save(ctx context.Context) (*BankTranslation, error) {
	return withHooks(ctx, btuo.sqlSave, btuo.mutation, btuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (btuo *BankTranslationUpdateOne) SaveX(ctx context.Context) *BankTranslation {
	node, err := btuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (btuo *BankTranslationUpdateOne) Exec(ctx context.Context) error {
	_, err := btuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btuo *BankTranslationUpdateOne) ExecX(ctx context.Context) {
	if err := btuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btuo *BankTranslationUpdateOne) check() error {
	if v, ok := btuo.mutation.Locale(); ok {
		if err := banktranslation.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "BankTranslation.locale": %w`, err)}
		}
	}
	if btuo.mutation.BankCleared() && len(btuo.mutation.BankIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BankTranslation.bank"`)
	}
	return nil
}

func (btuo *BankTranslationUpdateOne) sqlSave(ctx context.Context) (_node *BankTranslation, err error) {
	if err := btuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(banktranslation.Table, banktranslation.Columns, sqlgraph.NewFieldSpec(banktranslation.FieldID, field.TypeInt))
	id, ok := btuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BankTranslation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := btuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, banktranslation.FieldID)
		for _, f := range fields {
			if !banktranslation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != banktranslation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := btuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btuo.mutation.Locale(); ok {
		_spec.SetField(banktranslation.FieldLocale, field.TypeString, value)
	}
	if value, ok := btuo.mutation.Name(); ok {
		_spec.SetField(banktranslation.FieldName, field.TypeString, value)
	}
	if value, ok := btuo.mutation.Description(); ok {
		_spec.SetField(banktranslation.FieldDescription, field.TypeString, value)
	}
	if btuo.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banktranslation.BankTable,
			Columns: []string{banktranslation.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btuo.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banktranslation.BankTable,
			Columns: []string{banktranslation.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BankTranslation{config: btuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, btuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{banktranslation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	btuo.mutation.done = true
	return _node, nil
}
