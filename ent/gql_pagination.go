// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"mybanks-api/ent/bank"
	"mybanks-api/ent/banktranslation"
	"mybanks-api/ent/currencyrate"
	"mybanks-api/ent/offer"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// BankEdge is the edge representation of Bank.
type BankEdge struct {
	Node   *Bank  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// BankConnection is the connection containing edges to Bank.
type BankConnection struct {
	Edges      []*BankEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *BankConnection) build(nodes []*Bank, pager *bankPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Bank
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Bank {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Bank {
			return nodes[i]
		}
	}
	c.Edges = make([]*BankEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BankEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BankPaginateOption enables pagination customization.
type BankPaginateOption func(*bankPager) error

// WithBankOrder configures pagination ordering.
func WithBankOrder(order *BankOrder) BankPaginateOption {
	if order == nil {
		order = DefaultBankOrder
	}
	o := *order
	return func(pager *bankPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBankOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBankFilter configures pagination filter.
func WithBankFilter(filter func(*BankQuery) (*BankQuery, error)) BankPaginateOption {
	return func(pager *bankPager) error {
		if filter == nil {
			return errors.New("BankQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type bankPager struct {
	reverse bool
	order   *BankOrder
	filter  func(*BankQuery) (*BankQuery, error)
}

func newBankPager(opts []BankPaginateOption, reverse bool) (*bankPager, error) {
	pager := &bankPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBankOrder
	}
	return pager, nil
}

func (p *bankPager) applyFilter(query *BankQuery) (*BankQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *bankPager) toCursor(b *Bank) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *bankPager) applyCursors(query *BankQuery, after, before *Cursor) (*BankQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBankOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *bankPager) applyOrder(query *BankQuery) *BankQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBankOrder.Field {
		query = query.Order(DefaultBankOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *bankPager) orderExpr(query *BankQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBankOrder.Field {
			b.Comma().Ident(DefaultBankOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Bank.
func (b *BankQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BankPaginateOption,
) (*BankConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBankPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BankConnection{Edges: []*BankEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := b.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if b, err = pager.applyCursors(b, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	b = pager.applyOrder(b)
	nodes, err := b.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BankOrderField defines the ordering field of Bank.
type BankOrderField struct {
	// Value extracts the ordering value from the given Bank.
	Value    func(*Bank) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) bank.OrderOption
	toCursor func(*Bank) Cursor
}

// BankOrder defines the ordering of Bank.
type BankOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *BankOrderField `json:"field"`
}

// DefaultBankOrder is the default ordering of Bank.
var DefaultBankOrder = &BankOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BankOrderField{
		Value: func(b *Bank) (ent.Value, error) {
			return b.ID, nil
		},
		column: bank.FieldID,
		toTerm: bank.ByID,
		toCursor: func(b *Bank) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Bank into BankEdge.
func (b *Bank) ToEdge(order *BankOrder) *BankEdge {
	if order == nil {
		order = DefaultBankOrder
	}
	return &BankEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// BankTranslationEdge is the edge representation of BankTranslation.
type BankTranslationEdge struct {
	Node   *BankTranslation `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// BankTranslationConnection is the connection containing edges to BankTranslation.
type BankTranslationConnection struct {
	Edges      []*BankTranslationEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *BankTranslationConnection) build(nodes []*BankTranslation, pager *banktranslationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *BankTranslation
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *BankTranslation {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *BankTranslation {
			return nodes[i]
		}
	}
	c.Edges = make([]*BankTranslationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BankTranslationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BankTranslationPaginateOption enables pagination customization.
type BankTranslationPaginateOption func(*banktranslationPager) error

// WithBankTranslationOrder configures pagination ordering.
func WithBankTranslationOrder(order *BankTranslationOrder) BankTranslationPaginateOption {
	if order == nil {
		order = DefaultBankTranslationOrder
	}
	o := *order
	return func(pager *banktranslationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBankTranslationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBankTranslationFilter configures pagination filter.
func WithBankTranslationFilter(filter func(*BankTranslationQuery) (*BankTranslationQuery, error)) BankTranslationPaginateOption {
	return func(pager *banktranslationPager) error {
		if filter == nil {
			return errors.New("BankTranslationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type banktranslationPager struct {
	reverse bool
	order   *BankTranslationOrder
	filter  func(*BankTranslationQuery) (*BankTranslationQuery, error)
}

func newBankTranslationPager(opts []BankTranslationPaginateOption, reverse bool) (*banktranslationPager, error) {
	pager := &banktranslationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBankTranslationOrder
	}
	return pager, nil
}

func (p *banktranslationPager) applyFilter(query *BankTranslationQuery) (*BankTranslationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *banktranslationPager) toCursor(bt *BankTranslation) Cursor {
	return p.order.Field.toCursor(bt)
}

func (p *banktranslationPager) applyCursors(query *BankTranslationQuery, after, before *Cursor) (*BankTranslationQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultBankTranslationOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *banktranslationPager) applyOrder(query *BankTranslationQuery) *BankTranslationQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultBankTranslationOrder.Field {
		query = query.Order(DefaultBankTranslationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *banktranslationPager) orderExpr(query *BankTranslationQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBankTranslationOrder.Field {
			b.Comma().Ident(DefaultBankTranslationOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to BankTranslation.
func (bt *BankTranslationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BankTranslationPaginateOption,
) (*BankTranslationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBankTranslationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if bt, err = pager.applyFilter(bt); err != nil {
		return nil, err
	}
	conn := &BankTranslationConnection{Edges: []*BankTranslationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := bt.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if bt, err = pager.applyCursors(bt, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		bt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := bt.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	bt = pager.applyOrder(bt)
	nodes, err := bt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// BankTranslationOrderField defines the ordering field of BankTranslation.
type BankTranslationOrderField struct {
	// Value extracts the ordering value from the given BankTranslation.
	Value    func(*BankTranslation) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) banktranslation.OrderOption
	toCursor func(*BankTranslation) Cursor
}

// BankTranslationOrder defines the ordering of BankTranslation.
type BankTranslationOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *BankTranslationOrderField `json:"field"`
}

// DefaultBankTranslationOrder is the default ordering of BankTranslation.
var DefaultBankTranslationOrder = &BankTranslationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &BankTranslationOrderField{
		Value: func(bt *BankTranslation) (ent.Value, error) {
			return bt.ID, nil
		},
		column: banktranslation.FieldID,
		toTerm: banktranslation.ByID,
		toCursor: func(bt *BankTranslation) Cursor {
			return Cursor{ID: bt.ID}
		},
	},
}

// ToEdge converts BankTranslation into BankTranslationEdge.
func (bt *BankTranslation) ToEdge(order *BankTranslationOrder) *BankTranslationEdge {
	if order == nil {
		order = DefaultBankTranslationOrder
	}
	return &BankTranslationEdge{
		Node:   bt,
		Cursor: order.Field.toCursor(bt),
	}
}

// CurrencyRateEdge is the edge representation of CurrencyRate.
type CurrencyRateEdge struct {
	Node   *CurrencyRate `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// CurrencyRateConnection is the connection containing edges to CurrencyRate.
type CurrencyRateConnection struct {
	Edges      []*CurrencyRateEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *CurrencyRateConnection) build(nodes []*CurrencyRate, pager *currencyratePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CurrencyRate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CurrencyRate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CurrencyRate {
			return nodes[i]
		}
	}
	c.Edges = make([]*CurrencyRateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CurrencyRateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CurrencyRatePaginateOption enables pagination customization.
type CurrencyRatePaginateOption func(*currencyratePager) error

// WithCurrencyRateOrder configures pagination ordering.
func WithCurrencyRateOrder(order *CurrencyRateOrder) CurrencyRatePaginateOption {
	if order == nil {
		order = DefaultCurrencyRateOrder
	}
	o := *order
	return func(pager *currencyratePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCurrencyRateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCurrencyRateFilter configures pagination filter.
func WithCurrencyRateFilter(filter func(*CurrencyRateQuery) (*CurrencyRateQuery, error)) CurrencyRatePaginateOption {
	return func(pager *currencyratePager) error {
		if filter == nil {
			return errors.New("CurrencyRateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type currencyratePager struct {
	reverse bool
	order   *CurrencyRateOrder
	filter  func(*CurrencyRateQuery) (*CurrencyRateQuery, error)
}

func newCurrencyRatePager(opts []CurrencyRatePaginateOption, reverse bool) (*currencyratePager, error) {
	pager := &currencyratePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCurrencyRateOrder
	}
	return pager, nil
}

func (p *currencyratePager) applyFilter(query *CurrencyRateQuery) (*CurrencyRateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *currencyratePager) toCursor(cr *CurrencyRate) Cursor {
	return p.order.Field.toCursor(cr)
}

func (p *currencyratePager) applyCursors(query *CurrencyRateQuery, after, before *Cursor) (*CurrencyRateQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCurrencyRateOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *currencyratePager) applyOrder(query *CurrencyRateQuery) *CurrencyRateQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCurrencyRateOrder.Field {
		query = query.Order(DefaultCurrencyRateOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *currencyratePager) orderExpr(query *CurrencyRateQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCurrencyRateOrder.Field {
			b.Comma().Ident(DefaultCurrencyRateOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CurrencyRate.
func (cr *CurrencyRateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CurrencyRatePaginateOption,
) (*CurrencyRateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCurrencyRatePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if cr, err = pager.applyFilter(cr); err != nil {
		return nil, err
	}
	conn := &CurrencyRateConnection{Edges: []*CurrencyRateEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := cr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if cr, err = pager.applyCursors(cr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		cr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := cr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	cr = pager.applyOrder(cr)
	nodes, err := cr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CurrencyRateOrderField defines the ordering field of CurrencyRate.
type CurrencyRateOrderField struct {
	// Value extracts the ordering value from the given CurrencyRate.
	Value    func(*CurrencyRate) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) currencyrate.OrderOption
	toCursor func(*CurrencyRate) Cursor
}

// CurrencyRateOrder defines the ordering of CurrencyRate.
type CurrencyRateOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *CurrencyRateOrderField `json:"field"`
}

// DefaultCurrencyRateOrder is the default ordering of CurrencyRate.
var DefaultCurrencyRateOrder = &CurrencyRateOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CurrencyRateOrderField{
		Value: func(cr *CurrencyRate) (ent.Value, error) {
			return cr.ID, nil
		},
		column: currencyrate.FieldID,
		toTerm: currencyrate.ByID,
		toCursor: func(cr *CurrencyRate) Cursor {
			return Cursor{ID: cr.ID}
		},
	},
}

// ToEdge converts CurrencyRate into CurrencyRateEdge.
func (cr *CurrencyRate) ToEdge(order *CurrencyRateOrder) *CurrencyRateEdge {
	if order == nil {
		order = DefaultCurrencyRateOrder
	}
	return &CurrencyRateEdge{
		Node:   cr,
		Cursor: order.Field.toCursor(cr),
	}
}

// OfferEdge is the edge representation of Offer.
type OfferEdge struct {
	Node   *Offer `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// OfferConnection is the connection containing edges to Offer.
type OfferConnection struct {
	Edges      []*OfferEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *OfferConnection) build(nodes []*Offer, pager *offerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Offer
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Offer {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Offer {
			return nodes[i]
		}
	}
	c.Edges = make([]*OfferEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &OfferEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// OfferPaginateOption enables pagination customization.
type OfferPaginateOption func(*offerPager) error

// WithOfferOrder configures pagination ordering.
func WithOfferOrder(order *OfferOrder) OfferPaginateOption {
	if order == nil {
		order = DefaultOfferOrder
	}
	o := *order
	return func(pager *offerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultOfferOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithOfferFilter configures pagination filter.
func WithOfferFilter(filter func(*OfferQuery) (*OfferQuery, error)) OfferPaginateOption {
	return func(pager *offerPager) error {
		if filter == nil {
			return errors.New("OfferQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type offerPager struct {
	reverse bool
	order   *OfferOrder
	filter  func(*OfferQuery) (*OfferQuery, error)
}

func newOfferPager(opts []OfferPaginateOption, reverse bool) (*offerPager, error) {
	pager := &offerPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultOfferOrder
	}
	return pager, nil
}

func (p *offerPager) applyFilter(query *OfferQuery) (*OfferQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *offerPager) toCursor(o *Offer) Cursor {
	return p.order.Field.toCursor(o)
}

func (p *offerPager) applyCursors(query *OfferQuery, after, before *Cursor) (*OfferQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultOfferOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *offerPager) applyOrder(query *OfferQuery) *OfferQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultOfferOrder.Field {
		query = query.Order(DefaultOfferOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *offerPager) orderExpr(query *OfferQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultOfferOrder.Field {
			b.Comma().Ident(DefaultOfferOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Offer.
func (o *OfferQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...OfferPaginateOption,
) (*OfferConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newOfferPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if o, err = pager.applyFilter(o); err != nil {
		return nil, err
	}
	conn := &OfferConnection{Edges: []*OfferEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := o.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if o, err = pager.applyCursors(o, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		o.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := o.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	o = pager.applyOrder(o)
	nodes, err := o.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// OfferOrderField defines the ordering field of Offer.
type OfferOrderField struct {
	// Value extracts the ordering value from the given Offer.
	Value    func(*Offer) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) offer.OrderOption
	toCursor func(*Offer) Cursor
}

// OfferOrder defines the ordering of Offer.
type OfferOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *OfferOrderField `json:"field"`
}

// DefaultOfferOrder is the default ordering of Offer.
var DefaultOfferOrder = &OfferOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &OfferOrderField{
		Value: func(o *Offer) (ent.Value, error) {
			return o.ID, nil
		},
		column: offer.FieldID,
		toTerm: offer.ByID,
		toCursor: func(o *Offer) Cursor {
			return Cursor{ID: o.ID}
		},
	},
}

// ToEdge converts Offer into OfferEdge.
func (o *Offer) ToEdge(order *OfferOrder) *OfferEdge {
	if order == nil {
		order = DefaultOfferOrder
	}
	return &OfferEdge{
		Node:   o,
		Cursor: order.Field.toCursor(o),
	}
}
