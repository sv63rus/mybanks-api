// Code generated by ent, DO NOT EDIT.

package offer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the offer type in the database.
	Label = "offer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// EdgeBank holds the string denoting the bank edge name in mutations.
	EdgeBank = "bank"
	// Table holds the table name of the offer in the database.
	Table = "offers"
	// BankTable is the table that holds the bank relation/edge.
	BankTable = "offers"
	// BankInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	BankInverseTable = "banks"
	// BankColumn is the table column denoting the bank relation/edge.
	BankColumn = "bank_offers"
)

// Columns holds all SQL columns for offer fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldDescription,
	FieldLink,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "offers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bank_offers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Offer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByBankField orders the results by bank field.
func ByBankField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBankStep(), sql.OrderByField(field, opts...))
	}
}
func newBankStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BankInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
	)
}
