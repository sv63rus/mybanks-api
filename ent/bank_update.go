// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mybanks-api/ent/bank"
	"mybanks-api/ent/currencyrate"
	"mybanks-api/ent/offer"
	"mybanks-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BankUpdate is the builder for updating Bank entities.
type BankUpdate struct {
	config
	hooks    []Hook
	mutation *BankMutation
}

// Where appends a list predicates to the BankUpdate builder.
func (bu *BankUpdate) Where(ps ...predicate.Bank) *BankUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BankUpdate) SetName(s string) *BankUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BankUpdate) SetNillableName(s *string) *BankUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetCountry sets the "country" field.
func (bu *BankUpdate) SetCountry(s string) *BankUpdate {
	bu.mutation.SetCountry(s)
	return bu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (bu *BankUpdate) SetNillableCountry(s *string) *BankUpdate {
	if s != nil {
		bu.SetCountry(*s)
	}
	return bu
}

// SetWebsite sets the "website" field.
func (bu *BankUpdate) SetWebsite(s string) *BankUpdate {
	bu.mutation.SetWebsite(s)
	return bu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (bu *BankUpdate) SetNillableWebsite(s *string) *BankUpdate {
	if s != nil {
		bu.SetWebsite(*s)
	}
	return bu
}

// ClearWebsite clears the value of the "website" field.
func (bu *BankUpdate) ClearWebsite() *BankUpdate {
	bu.mutation.ClearWebsite()
	return bu
}

// SetLogoURL sets the "logo_url" field.
func (bu *BankUpdate) SetLogoURL(s string) *BankUpdate {
	bu.mutation.SetLogoURL(s)
	return bu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (bu *BankUpdate) SetNillableLogoURL(s *string) *BankUpdate {
	if s != nil {
		bu.SetLogoURL(*s)
	}
	return bu
}

// ClearLogoURL clears the value of the "logo_url" field.
func (bu *BankUpdate) ClearLogoURL() *BankUpdate {
	bu.mutation.ClearLogoURL()
	return bu
}

// SetTest sets the "test" field.
func (bu *BankUpdate) SetTest(s string) *BankUpdate {
	bu.mutation.SetTest(s)
	return bu
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (bu *BankUpdate) SetNillableTest(s *string) *BankUpdate {
	if s != nil {
		bu.SetTest(*s)
	}
	return bu
}

// ClearTest clears the value of the "test" field.
func (bu *BankUpdate) ClearTest() *BankUpdate {
	bu.mutation.ClearTest()
	return bu
}

// AddCurrencyRateIDs adds the "currency_rates" edge to the CurrencyRate entity by IDs.
func (bu *BankUpdate) AddCurrencyRateIDs(ids ...int) *BankUpdate {
	bu.mutation.AddCurrencyRateIDs(ids...)
	return bu
}

// AddCurrencyRates adds the "currency_rates" edges to the CurrencyRate entity.
func (bu *BankUpdate) AddCurrencyRates(c ...*CurrencyRate) *BankUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCurrencyRateIDs(ids...)
}

// AddOfferIDs adds the "offers" edge to the Offer entity by IDs.
func (bu *BankUpdate) AddOfferIDs(ids ...int) *BankUpdate {
	bu.mutation.AddOfferIDs(ids...)
	return bu
}

// AddOffers adds the "offers" edges to the Offer entity.
func (bu *BankUpdate) AddOffers(o ...*Offer) *BankUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bu.AddOfferIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (bu *BankUpdate) Mutation() *BankMutation {
	return bu.mutation
}

// ClearCurrencyRates clears all "currency_rates" edges to the CurrencyRate entity.
func (bu *BankUpdate) ClearCurrencyRates() *BankUpdate {
	bu.mutation.ClearCurrencyRates()
	return bu
}

// RemoveCurrencyRateIDs removes the "currency_rates" edge to CurrencyRate entities by IDs.
func (bu *BankUpdate) RemoveCurrencyRateIDs(ids ...int) *BankUpdate {
	bu.mutation.RemoveCurrencyRateIDs(ids...)
	return bu
}

// RemoveCurrencyRates removes "currency_rates" edges to CurrencyRate entities.
func (bu *BankUpdate) RemoveCurrencyRates(c ...*CurrencyRate) *BankUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCurrencyRateIDs(ids...)
}

// ClearOffers clears all "offers" edges to the Offer entity.
func (bu *BankUpdate) ClearOffers() *BankUpdate {
	bu.mutation.ClearOffers()
	return bu
}

// RemoveOfferIDs removes the "offers" edge to Offer entities by IDs.
func (bu *BankUpdate) RemoveOfferIDs(ids ...int) *BankUpdate {
	bu.mutation.RemoveOfferIDs(ids...)
	return bu
}

// RemoveOffers removes "offers" edges to Offer entities.
func (bu *BankUpdate) RemoveOffers(o ...*Offer) *BankUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return bu.RemoveOfferIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BankUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BankUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BankUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BankUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bank.Table, bank.Columns, sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(bank.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Country(); ok {
		_spec.SetField(bank.FieldCountry, field.TypeString, value)
	}
	if value, ok := bu.mutation.Website(); ok {
		_spec.SetField(bank.FieldWebsite, field.TypeString, value)
	}
	if bu.mutation.WebsiteCleared() {
		_spec.ClearField(bank.FieldWebsite, field.TypeString)
	}
	if value, ok := bu.mutation.LogoURL(); ok {
		_spec.SetField(bank.FieldLogoURL, field.TypeString, value)
	}
	if bu.mutation.LogoURLCleared() {
		_spec.ClearField(bank.FieldLogoURL, field.TypeString)
	}
	if value, ok := bu.mutation.Test(); ok {
		_spec.SetField(bank.FieldTest, field.TypeString, value)
	}
	if bu.mutation.TestCleared() {
		_spec.ClearField(bank.FieldTest, field.TypeString)
	}
	if bu.mutation.CurrencyRatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CurrencyRatesTable,
			Columns: []string{bank.CurrencyRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCurrencyRatesIDs(); len(nodes) > 0 && !bu.mutation.CurrencyRatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CurrencyRatesTable,
			Columns: []string{bank.CurrencyRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CurrencyRatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CurrencyRatesTable,
			Columns: []string{bank.CurrencyRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.OffersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.OffersTable,
			Columns: []string{bank.OffersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(offer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedOffersIDs(); len(nodes) > 0 && !bu.mutation.OffersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.OffersTable,
			Columns: []string{bank.OffersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(offer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OffersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.OffersTable,
			Columns: []string{bank.OffersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(offer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BankUpdateOne is the builder for updating a single Bank entity.
type BankUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BankMutation
}

// SetName sets the "name" field.
func (buo *BankUpdateOne) SetName(s string) *BankUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableName(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetCountry sets the "country" field.
func (buo *BankUpdateOne) SetCountry(s string) *BankUpdateOne {
	buo.mutation.SetCountry(s)
	return buo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableCountry(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetCountry(*s)
	}
	return buo
}

// SetWebsite sets the "website" field.
func (buo *BankUpdateOne) SetWebsite(s string) *BankUpdateOne {
	buo.mutation.SetWebsite(s)
	return buo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableWebsite(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetWebsite(*s)
	}
	return buo
}

// ClearWebsite clears the value of the "website" field.
func (buo *BankUpdateOne) ClearWebsite() *BankUpdateOne {
	buo.mutation.ClearWebsite()
	return buo
}

// SetLogoURL sets the "logo_url" field.
func (buo *BankUpdateOne) SetLogoURL(s string) *BankUpdateOne {
	buo.mutation.SetLogoURL(s)
	return buo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableLogoURL(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetLogoURL(*s)
	}
	return buo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (buo *BankUpdateOne) ClearLogoURL() *BankUpdateOne {
	buo.mutation.ClearLogoURL()
	return buo
}

// SetTest sets the "test" field.
func (buo *BankUpdateOne) SetTest(s string) *BankUpdateOne {
	buo.mutation.SetTest(s)
	return buo
}

// SetNillableTest sets the "test" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableTest(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetTest(*s)
	}
	return buo
}

// ClearTest clears the value of the "test" field.
func (buo *BankUpdateOne) ClearTest() *BankUpdateOne {
	buo.mutation.ClearTest()
	return buo
}

// AddCurrencyRateIDs adds the "currency_rates" edge to the CurrencyRate entity by IDs.
func (buo *BankUpdateOne) AddCurrencyRateIDs(ids ...int) *BankUpdateOne {
	buo.mutation.AddCurrencyRateIDs(ids...)
	return buo
}

// AddCurrencyRates adds the "currency_rates" edges to the CurrencyRate entity.
func (buo *BankUpdateOne) AddCurrencyRates(c ...*CurrencyRate) *BankUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCurrencyRateIDs(ids...)
}

// AddOfferIDs adds the "offers" edge to the Offer entity by IDs.
func (buo *BankUpdateOne) AddOfferIDs(ids ...int) *BankUpdateOne {
	buo.mutation.AddOfferIDs(ids...)
	return buo
}

// AddOffers adds the "offers" edges to the Offer entity.
func (buo *BankUpdateOne) AddOffers(o ...*Offer) *BankUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buo.AddOfferIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (buo *BankUpdateOne) Mutation() *BankMutation {
	return buo.mutation
}

// ClearCurrencyRates clears all "currency_rates" edges to the CurrencyRate entity.
func (buo *BankUpdateOne) ClearCurrencyRates() *BankUpdateOne {
	buo.mutation.ClearCurrencyRates()
	return buo
}

// RemoveCurrencyRateIDs removes the "currency_rates" edge to CurrencyRate entities by IDs.
func (buo *BankUpdateOne) RemoveCurrencyRateIDs(ids ...int) *BankUpdateOne {
	buo.mutation.RemoveCurrencyRateIDs(ids...)
	return buo
}

// RemoveCurrencyRates removes "currency_rates" edges to CurrencyRate entities.
func (buo *BankUpdateOne) RemoveCurrencyRates(c ...*CurrencyRate) *BankUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCurrencyRateIDs(ids...)
}

// ClearOffers clears all "offers" edges to the Offer entity.
func (buo *BankUpdateOne) ClearOffers() *BankUpdateOne {
	buo.mutation.ClearOffers()
	return buo
}

// RemoveOfferIDs removes the "offers" edge to Offer entities by IDs.
func (buo *BankUpdateOne) RemoveOfferIDs(ids ...int) *BankUpdateOne {
	buo.mutation.RemoveOfferIDs(ids...)
	return buo
}

// RemoveOffers removes "offers" edges to Offer entities.
func (buo *BankUpdateOne) RemoveOffers(o ...*Offer) *BankUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return buo.RemoveOfferIDs(ids...)
}

// Where appends a list predicates to the BankUpdate builder.
func (buo *BankUpdateOne) Where(ps ...predicate.Bank) *BankUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BankUpdateOne) Select(field string, fields ...string) *BankUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bank entity.
func (buo *BankUpdateOne) Save(ctx context.Context) (*Bank, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BankUpdateOne) SaveX(ctx context.Context) *Bank {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BankUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BankUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BankUpdateOne) sqlSave(ctx context.Context) (_node *Bank, err error) {
	_spec := sqlgraph.NewUpdateSpec(bank.Table, bank.Columns, sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bank.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bank.FieldID)
		for _, f := range fields {
			if !bank.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bank.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(bank.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Country(); ok {
		_spec.SetField(bank.FieldCountry, field.TypeString, value)
	}
	if value, ok := buo.mutation.Website(); ok {
		_spec.SetField(bank.FieldWebsite, field.TypeString, value)
	}
	if buo.mutation.WebsiteCleared() {
		_spec.ClearField(bank.FieldWebsite, field.TypeString)
	}
	if value, ok := buo.mutation.LogoURL(); ok {
		_spec.SetField(bank.FieldLogoURL, field.TypeString, value)
	}
	if buo.mutation.LogoURLCleared() {
		_spec.ClearField(bank.FieldLogoURL, field.TypeString)
	}
	if value, ok := buo.mutation.Test(); ok {
		_spec.SetField(bank.FieldTest, field.TypeString, value)
	}
	if buo.mutation.TestCleared() {
		_spec.ClearField(bank.FieldTest, field.TypeString)
	}
	if buo.mutation.CurrencyRatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CurrencyRatesTable,
			Columns: []string{bank.CurrencyRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCurrencyRatesIDs(); len(nodes) > 0 && !buo.mutation.CurrencyRatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CurrencyRatesTable,
			Columns: []string{bank.CurrencyRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CurrencyRatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CurrencyRatesTable,
			Columns: []string{bank.CurrencyRatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.OffersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.OffersTable,
			Columns: []string{bank.OffersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(offer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedOffersIDs(); len(nodes) > 0 && !buo.mutation.OffersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.OffersTable,
			Columns: []string{bank.OffersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(offer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OffersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.OffersTable,
			Columns: []string{bank.OffersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(offer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bank{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
