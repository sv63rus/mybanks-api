// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"mybanks-api/ent/bank"
	"mybanks-api/ent/currencyrate"
	"mybanks-api/ent/offer"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (b *BankQuery) CollectFields(ctx context.Context, satisfies ...string) (*BankQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return b, nil
	}
	if err := b.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return b, nil
}

func (b *BankQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(bank.Columns))
		selectedFields = []string{bank.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "currencyRates":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&CurrencyRateClient{config: b.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, currencyrateImplementors)...); err != nil {
				return err
			}
			b.WithNamedCurrencyRates(alias, func(wq *CurrencyRateQuery) {
				*wq = *query
			})

		case "offers":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&OfferClient{config: b.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, offerImplementors)...); err != nil {
				return err
			}
			b.WithNamedOffers(alias, func(wq *OfferQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[bank.FieldName]; !ok {
				selectedFields = append(selectedFields, bank.FieldName)
				fieldSeen[bank.FieldName] = struct{}{}
			}
		case "country":
			if _, ok := fieldSeen[bank.FieldCountry]; !ok {
				selectedFields = append(selectedFields, bank.FieldCountry)
				fieldSeen[bank.FieldCountry] = struct{}{}
			}
		case "website":
			if _, ok := fieldSeen[bank.FieldWebsite]; !ok {
				selectedFields = append(selectedFields, bank.FieldWebsite)
				fieldSeen[bank.FieldWebsite] = struct{}{}
			}
		case "logoURL":
			if _, ok := fieldSeen[bank.FieldLogoURL]; !ok {
				selectedFields = append(selectedFields, bank.FieldLogoURL)
				fieldSeen[bank.FieldLogoURL] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		b.Select(selectedFields...)
	}
	return nil
}

type bankPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []BankPaginateOption
}

func newBankPaginateArgs(rv map[string]any) *bankPaginateArgs {
	args := &bankPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (cr *CurrencyRateQuery) CollectFields(ctx context.Context, satisfies ...string) (*CurrencyRateQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return cr, nil
	}
	if err := cr.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return cr, nil
}

func (cr *CurrencyRateQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(currencyrate.Columns))
		selectedFields = []string{currencyrate.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "bank":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&BankClient{config: cr.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, bankImplementors)...); err != nil {
				return err
			}
			cr.withBank = query
		case "currency":
			if _, ok := fieldSeen[currencyrate.FieldCurrency]; !ok {
				selectedFields = append(selectedFields, currencyrate.FieldCurrency)
				fieldSeen[currencyrate.FieldCurrency] = struct{}{}
			}
		case "rate":
			if _, ok := fieldSeen[currencyrate.FieldRate]; !ok {
				selectedFields = append(selectedFields, currencyrate.FieldRate)
				fieldSeen[currencyrate.FieldRate] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		cr.Select(selectedFields...)
	}
	return nil
}

type currencyratePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []CurrencyRatePaginateOption
}

func newCurrencyRatePaginateArgs(rv map[string]any) *currencyratePaginateArgs {
	args := &currencyratePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (o *OfferQuery) CollectFields(ctx context.Context, satisfies ...string) (*OfferQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return o, nil
	}
	if err := o.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return o, nil
}

func (o *OfferQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(offer.Columns))
		selectedFields = []string{offer.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "bank":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&BankClient{config: o.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, bankImplementors)...); err != nil {
				return err
			}
			o.withBank = query
		case "type":
			if _, ok := fieldSeen[offer.FieldType]; !ok {
				selectedFields = append(selectedFields, offer.FieldType)
				fieldSeen[offer.FieldType] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[offer.FieldDescription]; !ok {
				selectedFields = append(selectedFields, offer.FieldDescription)
				fieldSeen[offer.FieldDescription] = struct{}{}
			}
		case "link":
			if _, ok := fieldSeen[offer.FieldLink]; !ok {
				selectedFields = append(selectedFields, offer.FieldLink)
				fieldSeen[offer.FieldLink] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		o.Select(selectedFields...)
	}
	return nil
}

type offerPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []OfferPaginateOption
}

func newOfferPaginateArgs(rv map[string]any) *offerPaginateArgs {
	args := &offerPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
