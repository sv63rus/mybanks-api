// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mybanks-api/ent/bank"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Bank is the model entity for the Bank schema.
type Bank struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Website holds the value of the "website" field.
	Website string `json:"website,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BankQuery when eager-loading is set.
	Edges        BankEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BankEdges holds the relations/edges for other nodes in the graph.
type BankEdges struct {
	// CurrencyRates holds the value of the currency_rates edge.
	CurrencyRates []*CurrencyRate `json:"currency_rates,omitempty"`
	// Offers holds the value of the offers edge.
	Offers []*Offer `json:"offers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCurrencyRates map[string][]*CurrencyRate
	namedOffers        map[string][]*Offer
}

// CurrencyRatesOrErr returns the CurrencyRates value or an error if the edge
// was not loaded in eager-loading.
func (e BankEdges) CurrencyRatesOrErr() ([]*CurrencyRate, error) {
	if e.loadedTypes[0] {
		return e.CurrencyRates, nil
	}
	return nil, &NotLoadedError{edge: "currency_rates"}
}

// OffersOrErr returns the Offers value or an error if the edge
// was not loaded in eager-loading.
func (e BankEdges) OffersOrErr() ([]*Offer, error) {
	if e.loadedTypes[1] {
		return e.Offers, nil
	}
	return nil, &NotLoadedError{edge: "offers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bank) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bank.FieldID:
			values[i] = new(sql.NullInt64)
		case bank.FieldName, bank.FieldCountry, bank.FieldWebsite, bank.FieldLogoURL:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bank fields.
func (b *Bank) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bank.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bank.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case bank.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				b.Country = value.String
			}
		case bank.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				b.Website = value.String
			}
		case bank.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				b.LogoURL = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bank.
// This includes values selected through modifiers, order, etc.
func (b *Bank) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryCurrencyRates queries the "currency_rates" edge of the Bank entity.
func (b *Bank) QueryCurrencyRates() *CurrencyRateQuery {
	return NewBankClient(b.config).QueryCurrencyRates(b)
}

// QueryOffers queries the "offers" edge of the Bank entity.
func (b *Bank) QueryOffers() *OfferQuery {
	return NewBankClient(b.config).QueryOffers(b)
}

// Update returns a builder for updating this Bank.
// Note that you need to call Bank.Unwrap() before calling this method if this Bank
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bank) Update() *BankUpdateOne {
	return NewBankClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bank entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bank) Unwrap() *Bank {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bank is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bank) String() string {
	var builder strings.Builder
	builder.WriteString("Bank(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(b.Country)
	builder.WriteString(", ")
	builder.WriteString("website=")
	builder.WriteString(b.Website)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(b.LogoURL)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCurrencyRates returns the CurrencyRates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Bank) NamedCurrencyRates(name string) ([]*CurrencyRate, error) {
	if b.Edges.namedCurrencyRates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedCurrencyRates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Bank) appendNamedCurrencyRates(name string, edges ...*CurrencyRate) {
	if b.Edges.namedCurrencyRates == nil {
		b.Edges.namedCurrencyRates = make(map[string][]*CurrencyRate)
	}
	if len(edges) == 0 {
		b.Edges.namedCurrencyRates[name] = []*CurrencyRate{}
	} else {
		b.Edges.namedCurrencyRates[name] = append(b.Edges.namedCurrencyRates[name], edges...)
	}
}

// NamedOffers returns the Offers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (b *Bank) NamedOffers(name string) ([]*Offer, error) {
	if b.Edges.namedOffers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := b.Edges.namedOffers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (b *Bank) appendNamedOffers(name string, edges ...*Offer) {
	if b.Edges.namedOffers == nil {
		b.Edges.namedOffers = make(map[string][]*Offer)
	}
	if len(edges) == 0 {
		b.Edges.namedOffers[name] = []*Offer{}
	} else {
		b.Edges.namedOffers[name] = append(b.Edges.namedOffers[name], edges...)
	}
}

// Banks is a parsable slice of Bank.
type Banks []*Bank
