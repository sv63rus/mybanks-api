// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mybanks-api/ent/bank"
	"mybanks-api/ent/currencyrate"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CurrencyRate is the model entity for the CurrencyRate schema.
type CurrencyRate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ISO 4217 currency code
	Currency string `json:"currency,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate float64 `json:"rate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CurrencyRateQuery when eager-loading is set.
	Edges               CurrencyRateEdges `json:"edges"`
	bank_currency_rates *int
	selectValues        sql.SelectValues
}

// CurrencyRateEdges holds the relations/edges for other nodes in the graph.
type CurrencyRateEdges struct {
	// Bank holds the value of the bank edge.
	Bank *Bank `json:"bank,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BankOrErr returns the Bank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CurrencyRateEdges) BankOrErr() (*Bank, error) {
	if e.Bank != nil {
		return e.Bank, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bank.Label}
	}
	return nil, &NotLoadedError{edge: "bank"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CurrencyRate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case currencyrate.FieldRate:
			values[i] = new(sql.NullFloat64)
		case currencyrate.FieldID:
			values[i] = new(sql.NullInt64)
		case currencyrate.FieldCurrency:
			values[i] = new(sql.NullString)
		case currencyrate.ForeignKeys[0]: // bank_currency_rates
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CurrencyRate fields.
func (cr *CurrencyRate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case currencyrate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cr.ID = int(value.Int64)
		case currencyrate.FieldCurrency:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency", values[i])
			} else if value.Valid {
				cr.Currency = value.String
			}
		case currencyrate.FieldRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				cr.Rate = value.Float64
			}
		case currencyrate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field bank_currency_rates", value)
			} else if value.Valid {
				cr.bank_currency_rates = new(int)
				*cr.bank_currency_rates = int(value.Int64)
			}
		default:
			cr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CurrencyRate.
// This includes values selected through modifiers, order, etc.
func (cr *CurrencyRate) Value(name string) (ent.Value, error) {
	return cr.selectValues.Get(name)
}

// QueryBank queries the "bank" edge of the CurrencyRate entity.
func (cr *CurrencyRate) QueryBank() *BankQuery {
	return NewCurrencyRateClient(cr.config).QueryBank(cr)
}

// Update returns a builder for updating this CurrencyRate.
// Note that you need to call CurrencyRate.Unwrap() before calling this method if this CurrencyRate
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CurrencyRate) Update() *CurrencyRateUpdateOne {
	return NewCurrencyRateClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CurrencyRate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CurrencyRate) Unwrap() *CurrencyRate {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CurrencyRate is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CurrencyRate) String() string {
	var builder strings.Builder
	builder.WriteString("CurrencyRate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("currency=")
	builder.WriteString(cr.Currency)
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", cr.Rate))
	builder.WriteByte(')')
	return builder.String()
}

// CurrencyRates is a parsable slice of CurrencyRate.
type CurrencyRates []*CurrencyRate
