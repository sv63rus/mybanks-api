// Code generated by ent, DO NOT EDIT.

package currencyrate

import (
	"MyBank-Go-Backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldID, id))
}

// Currency applies equality check predicate on the "currency" field. It's identical to CurrencyEQ.
func Currency(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldCurrency, v))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldRate, v))
}

// CurrencyEQ applies the EQ predicate on the "currency" field.
func CurrencyEQ(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldCurrency, v))
}

// CurrencyNEQ applies the NEQ predicate on the "currency" field.
func CurrencyNEQ(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldCurrency, v))
}

// CurrencyIn applies the In predicate on the "currency" field.
func CurrencyIn(vs ...string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldCurrency, vs...))
}

// CurrencyNotIn applies the NotIn predicate on the "currency" field.
func CurrencyNotIn(vs ...string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldCurrency, vs...))
}

// CurrencyGT applies the GT predicate on the "currency" field.
func CurrencyGT(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldCurrency, v))
}

// CurrencyGTE applies the GTE predicate on the "currency" field.
func CurrencyGTE(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldCurrency, v))
}

// CurrencyLT applies the LT predicate on the "currency" field.
func CurrencyLT(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldCurrency, v))
}

// CurrencyLTE applies the LTE predicate on the "currency" field.
func CurrencyLTE(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldCurrency, v))
}

// CurrencyContains applies the Contains predicate on the "currency" field.
func CurrencyContains(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldContains(FieldCurrency, v))
}

// CurrencyHasPrefix applies the HasPrefix predicate on the "currency" field.
func CurrencyHasPrefix(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldHasPrefix(FieldCurrency, v))
}

// CurrencyHasSuffix applies the HasSuffix predicate on the "currency" field.
func CurrencyHasSuffix(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldHasSuffix(FieldCurrency, v))
}

// CurrencyEqualFold applies the EqualFold predicate on the "currency" field.
func CurrencyEqualFold(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEqualFold(FieldCurrency, v))
}

// CurrencyContainsFold applies the ContainsFold predicate on the "currency" field.
func CurrencyContainsFold(v string) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldContainsFold(FieldCurrency, v))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float64) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.FieldLTE(FieldRate, v))
}

// HasBank applies the HasEdge predicate on the "bank" edge.
func HasBank() predicate.CurrencyRate {
	return predicate.CurrencyRate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBankWith applies the HasEdge predicate on the "bank" edge with a given conditions (other predicates).
func HasBankWith(preds ...predicate.Bank) predicate.CurrencyRate {
	return predicate.CurrencyRate(func(s *sql.Selector) {
		step := newBankStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CurrencyRate) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CurrencyRate) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CurrencyRate) predicate.CurrencyRate {
	return predicate.CurrencyRate(sql.NotPredicates(p))
}
