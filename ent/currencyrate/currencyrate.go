// Code generated by ent, DO NOT EDIT.

package currencyrate

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the currencyrate type in the database.
	Label = "currency_rate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCurrency holds the string denoting the currency field in the database.
	FieldCurrency = "currency"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// EdgeBank holds the string denoting the bank edge name in mutations.
	EdgeBank = "bank"
	// Table holds the table name of the currencyrate in the database.
	Table = "currency_rates"
	// BankTable is the table that holds the bank relation/edge.
	BankTable = "currency_rates"
	// BankInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	BankInverseTable = "banks"
	// BankColumn is the table column denoting the bank relation/edge.
	BankColumn = "bank_currency_rates"
)

// Columns holds all SQL columns for currencyrate fields.
var Columns = []string{
	FieldID,
	FieldCurrency,
	FieldRate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "currency_rates"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"bank_currency_rates",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CurrencyRate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCurrency orders the results by the currency field.
func ByCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrency, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// ByBankField orders the results by bank field.
func ByBankField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBankStep(), sql.OrderByField(field, opts...))
	}
}
func newBankStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BankInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
	)
}
