// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mybanks-api/ent/bank"
	"mybanks-api/ent/banktranslation"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BankTranslationCreate is the builder for creating a BankTranslation entity.
type BankTranslationCreate struct {
	config
	mutation *BankTranslationMutation
	hooks    []Hook
}

// SetBankID sets the "bank_id" field.
func (btc *BankTranslationCreate) SetBankID(i int) *BankTranslationCreate {
	btc.mutation.SetBankID(i)
	return btc
}

// SetLocale sets the "locale" field.
func (btc *BankTranslationCreate) SetLocale(s string) *BankTranslationCreate {
	btc.mutation.SetLocale(s)
	return btc
}

// SetName sets the "name" field.
func (btc *BankTranslationCreate) SetName(s string) *BankTranslationCreate {
	btc.mutation.SetName(s)
	return btc
}

// SetDescription sets the "description" field.
func (btc *BankTranslationCreate) SetDescription(s string) *BankTranslationCreate {
	btc.mutation.SetDescription(s)
	return btc
}

// SetBank sets the "bank" edge to the Bank entity.
func (btc *BankTranslationCreate) SetBank(b *Bank) *BankTranslationCreate {
	return btc.SetBankID(b.ID)
}

// Mutation returns the BankTranslationMutation object of the builder.
func (btc *BankTranslationCreate) Mutation() *BankTranslationMutation {
	return btc.mutation
}

// Save creates the BankTranslation in the database.
func (btc *BankTranslationCreate) Save(ctx context.Context) (*BankTranslation, error) {
	return withHooks(ctx, btc.sqlSave, btc.mutation, btc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (btc *BankTranslationCreate) SaveX(ctx context.Context) *BankTranslation {
	v, err := btc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btc *BankTranslationCreate) Exec(ctx context.Context) error {
	_, err := btc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btc *BankTranslationCreate) ExecX(ctx context.Context) {
	if err := btc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btc *BankTranslationCreate) check() error {
	if _, ok := btc.mutation.BankID(); !ok {
		return &ValidationError{Name: "bank_id", err: errors.New(`ent: missing required field "BankTranslation.bank_id"`)}
	}
	if _, ok := btc.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "BankTranslation.locale"`)}
	}
	if v, ok := btc.mutation.Locale(); ok {
		if err := banktranslation.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "BankTranslation.locale": %w`, err)}
		}
	}
	if _, ok := btc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "BankTranslation.name"`)}
	}
	if _, ok := btc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "BankTranslation.description"`)}
	}
	if len(btc.mutation.BankIDs()) == 0 {
		return &ValidationError{Name: "bank", err: errors.New(`ent: missing required edge "BankTranslation.bank"`)}
	}
	return nil
}

func (btc *BankTranslationCreate) sqlSave(ctx context.Context) (*BankTranslation, error) {
	if err := btc.check(); err != nil {
		return nil, err
	}
	_node, _spec := btc.createSpec()
	if err := sqlgraph.CreateNode(ctx, btc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	btc.mutation.id = &_node.ID
	btc.mutation.done = true
	return _node, nil
}

func (btc *BankTranslationCreate) createSpec() (*BankTranslation, *sqlgraph.CreateSpec) {
	var (
		_node = &BankTranslation{config: btc.config}
		_spec = sqlgraph.NewCreateSpec(banktranslation.Table, sqlgraph.NewFieldSpec(banktranslation.FieldID, field.TypeInt))
	)
	if value, ok := btc.mutation.Locale(); ok {
		_spec.SetField(banktranslation.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := btc.mutation.Name(); ok {
		_spec.SetField(banktranslation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := btc.mutation.Description(); ok {
		_spec.SetField(banktranslation.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := btc.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   banktranslation.BankTable,
			Columns: []string{banktranslation.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BankTranslationCreateBulk is the builder for creating many BankTranslation entities in bulk.
type BankTranslationCreateBulk struct {
	config
	err      error
	builders []*BankTranslationCreate
}

// Save creates the BankTranslation entities in the database.
func (btcb *BankTranslationCreateBulk) Save(ctx context.Context) ([]*BankTranslation, error) {
	if btcb.err != nil {
		return nil, btcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(btcb.builders))
	nodes := make([]*BankTranslation, len(btcb.builders))
	mutators := make([]Mutator, len(btcb.builders))
	for i := range btcb.builders {
		func(i int, root context.Context) {
			builder := btcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BankTranslationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, btcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, btcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, btcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (btcb *BankTranslationCreateBulk) SaveX(ctx context.Context) []*BankTranslation {
	v, err := btcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btcb *BankTranslationCreateBulk) Exec(ctx context.Context) error {
	_, err := btcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btcb *BankTranslationCreateBulk) ExecX(ctx context.Context) {
	if err := btcb.Exec(ctx); err != nil {
		panic(err)
	}
}
