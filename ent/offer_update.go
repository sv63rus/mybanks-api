// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MyBank-Go-Backend/ent/bank"
	"MyBank-Go-Backend/ent/offer"
	"MyBank-Go-Backend/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OfferUpdate is the builder for updating Offer entities.
type OfferUpdate struct {
	config
	hooks    []Hook
	mutation *OfferMutation
}

// Where appends a list predicates to the OfferUpdate builder.
func (ou *OfferUpdate) Where(ps ...predicate.Offer) *OfferUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetType sets the "type" field.
func (ou *OfferUpdate) SetType(s string) *OfferUpdate {
	ou.mutation.SetType(s)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *OfferUpdate) SetNillableType(s *string) *OfferUpdate {
	if s != nil {
		ou.SetType(*s)
	}
	return ou
}

// SetDescription sets the "description" field.
func (ou *OfferUpdate) SetDescription(s string) *OfferUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *OfferUpdate) SetNillableDescription(s *string) *OfferUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// SetLink sets the "link" field.
func (ou *OfferUpdate) SetLink(s string) *OfferUpdate {
	ou.mutation.SetLink(s)
	return ou
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (ou *OfferUpdate) SetNillableLink(s *string) *OfferUpdate {
	if s != nil {
		ou.SetLink(*s)
	}
	return ou
}

// SetBankID sets the "bank" edge to the Bank entity by ID.
func (ou *OfferUpdate) SetBankID(id int) *OfferUpdate {
	ou.mutation.SetBankID(id)
	return ou
}

// SetBank sets the "bank" edge to the Bank entity.
func (ou *OfferUpdate) SetBank(b *Bank) *OfferUpdate {
	return ou.SetBankID(b.ID)
}

// Mutation returns the OfferMutation object of the builder.
func (ou *OfferUpdate) Mutation() *OfferMutation {
	return ou.mutation
}

// ClearBank clears the "bank" edge to the Bank entity.
func (ou *OfferUpdate) ClearBank() *OfferUpdate {
	ou.mutation.ClearBank()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OfferUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OfferUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OfferUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OfferUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OfferUpdate) check() error {
	if ou.mutation.BankCleared() && len(ou.mutation.BankIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Offer.bank"`)
	}
	return nil
}

func (ou *OfferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(offer.Table, offer.Columns, sqlgraph.NewFieldSpec(offer.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(offer.FieldType, field.TypeString, value)
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(offer.FieldDescription, field.TypeString, value)
	}
	if value, ok := ou.mutation.Link(); ok {
		_spec.SetField(offer.FieldLink, field.TypeString, value)
	}
	if ou.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   offer.BankTable,
			Columns: []string{offer.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   offer.BankTable,
			Columns: []string{offer.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{offer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OfferUpdateOne is the builder for updating a single Offer entity.
type OfferUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OfferMutation
}

// SetType sets the "type" field.
func (ouo *OfferUpdateOne) SetType(s string) *OfferUpdateOne {
	ouo.mutation.SetType(s)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *OfferUpdateOne) SetNillableType(s *string) *OfferUpdateOne {
	if s != nil {
		ouo.SetType(*s)
	}
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *OfferUpdateOne) SetDescription(s string) *OfferUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *OfferUpdateOne) SetNillableDescription(s *string) *OfferUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// SetLink sets the "link" field.
func (ouo *OfferUpdateOne) SetLink(s string) *OfferUpdateOne {
	ouo.mutation.SetLink(s)
	return ouo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (ouo *OfferUpdateOne) SetNillableLink(s *string) *OfferUpdateOne {
	if s != nil {
		ouo.SetLink(*s)
	}
	return ouo
}

// SetBankID sets the "bank" edge to the Bank entity by ID.
func (ouo *OfferUpdateOne) SetBankID(id int) *OfferUpdateOne {
	ouo.mutation.SetBankID(id)
	return ouo
}

// SetBank sets the "bank" edge to the Bank entity.
func (ouo *OfferUpdateOne) SetBank(b *Bank) *OfferUpdateOne {
	return ouo.SetBankID(b.ID)
}

// Mutation returns the OfferMutation object of the builder.
func (ouo *OfferUpdateOne) Mutation() *OfferMutation {
	return ouo.mutation
}

// ClearBank clears the "bank" edge to the Bank entity.
func (ouo *OfferUpdateOne) ClearBank() *OfferUpdateOne {
	ouo.mutation.ClearBank()
	return ouo
}

// Where appends a list predicates to the OfferUpdate builder.
func (ouo *OfferUpdateOne) Where(ps ...predicate.Offer) *OfferUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OfferUpdateOne) Select(field string, fields ...string) *OfferUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Offer entity.
func (ouo *OfferUpdateOne) Save(ctx context.Context) (*Offer, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OfferUpdateOne) SaveX(ctx context.Context) *Offer {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OfferUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OfferUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OfferUpdateOne) check() error {
	if ouo.mutation.BankCleared() && len(ouo.mutation.BankIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Offer.bank"`)
	}
	return nil
}

func (ouo *OfferUpdateOne) sqlSave(ctx context.Context) (_node *Offer, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(offer.Table, offer.Columns, sqlgraph.NewFieldSpec(offer.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Offer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, offer.FieldID)
		for _, f := range fields {
			if !offer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != offer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(offer.FieldType, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(offer.FieldDescription, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Link(); ok {
		_spec.SetField(offer.FieldLink, field.TypeString, value)
	}
	if ouo.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   offer.BankTable,
			Columns: []string{offer.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   offer.BankTable,
			Columns: []string{offer.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Offer{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{offer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
