// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (b *Bank) CurrencyRates(ctx context.Context) (result []*CurrencyRate, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedCurrencyRates(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.CurrencyRatesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryCurrencyRates().All(ctx)
	}
	return result, err
}

func (b *Bank) Offers(ctx context.Context) (result []*Offer, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = b.NamedOffers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = b.Edges.OffersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = b.QueryOffers().All(ctx)
	}
	return result, err
}

func (cr *CurrencyRate) Bank(ctx context.Context) (*Bank, error) {
	result, err := cr.Edges.BankOrErr()
	if IsNotLoaded(err) {
		result, err = cr.QueryBank().Only(ctx)
	}
	return result, err
}

func (o *Offer) Bank(ctx context.Context) (*Bank, error) {
	result, err := o.Edges.BankOrErr()
	if IsNotLoaded(err) {
		result, err = o.QueryBank().Only(ctx)
	}
	return result, err
}
