// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mybanks-api/ent/bank"
	"mybanks-api/ent/banktranslation"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BankTranslation is the model entity for the BankTranslation schema.
type BankTranslation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BankID holds the value of the "bank_id" field.
	BankID int `json:"bank_id,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale string `json:"locale,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BankTranslationQuery when eager-loading is set.
	Edges        BankTranslationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BankTranslationEdges holds the relations/edges for other nodes in the graph.
type BankTranslationEdges struct {
	// Bank holds the value of the bank edge.
	Bank *Bank `json:"bank,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// BankOrErr returns the Bank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BankTranslationEdges) BankOrErr() (*Bank, error) {
	if e.Bank != nil {
		return e.Bank, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bank.Label}
	}
	return nil, &NotLoadedError{edge: "bank"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BankTranslation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case banktranslation.FieldID, banktranslation.FieldBankID:
			values[i] = new(sql.NullInt64)
		case banktranslation.FieldLocale, banktranslation.FieldName, banktranslation.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BankTranslation fields.
func (bt *BankTranslation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case banktranslation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bt.ID = int(value.Int64)
		case banktranslation.FieldBankID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bank_id", values[i])
			} else if value.Valid {
				bt.BankID = int(value.Int64)
			}
		case banktranslation.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				bt.Locale = value.String
			}
		case banktranslation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bt.Name = value.String
			}
		case banktranslation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				bt.Description = value.String
			}
		default:
			bt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BankTranslation.
// This includes values selected through modifiers, order, etc.
func (bt *BankTranslation) Value(name string) (ent.Value, error) {
	return bt.selectValues.Get(name)
}

// QueryBank queries the "bank" edge of the BankTranslation entity.
func (bt *BankTranslation) QueryBank() *BankQuery {
	return NewBankTranslationClient(bt.config).QueryBank(bt)
}

// Update returns a builder for updating this BankTranslation.
// Note that you need to call BankTranslation.Unwrap() before calling this method if this BankTranslation
// was returned from a transaction, and the transaction was committed or rolled back.
func (bt *BankTranslation) Update() *BankTranslationUpdateOne {
	return NewBankTranslationClient(bt.config).UpdateOne(bt)
}

// Unwrap unwraps the BankTranslation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bt *BankTranslation) Unwrap() *BankTranslation {
	_tx, ok := bt.config.driver.(*txDriver)
	if !ok {
		panic("ent: BankTranslation is not a transactional entity")
	}
	bt.config.driver = _tx.drv
	return bt
}

// String implements the fmt.Stringer.
func (bt *BankTranslation) String() string {
	var builder strings.Builder
	builder.WriteString("BankTranslation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bt.ID))
	builder.WriteString("bank_id=")
	builder.WriteString(fmt.Sprintf("%v", bt.BankID))
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(bt.Locale)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(bt.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(bt.Description)
	builder.WriteByte(')')
	return builder.String()
}

// BankTranslations is a parsable slice of BankTranslation.
type BankTranslations []*BankTranslation
