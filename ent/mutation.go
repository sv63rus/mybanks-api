// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mybanks-api/ent/bank"
	"mybanks-api/ent/banktranslation"
	"mybanks-api/ent/currencyrate"
	"mybanks-api/ent/offer"
	"mybanks-api/ent/predicate"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBank            = "Bank"
	TypeBankTranslation = "BankTranslation"
	TypeCurrencyRate    = "CurrencyRate"
	TypeOffer           = "Offer"
)

// BankMutation represents an operation that mutates the Bank nodes in the graph.
type BankMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	country               *string
	website               *string
	logo_url              *string
	clearedFields         map[string]struct{}
	currency_rates        map[int]struct{}
	removedcurrency_rates map[int]struct{}
	clearedcurrency_rates bool
	offers                map[int]struct{}
	removedoffers         map[int]struct{}
	clearedoffers         bool
	translations          map[int]struct{}
	removedtranslations   map[int]struct{}
	clearedtranslations   bool
	done                  bool
	oldValue              func(context.Context) (*Bank, error)
	predicates            []predicate.Bank
}

var _ ent.Mutation = (*BankMutation)(nil)

// bankOption allows management of the mutation configuration using functional options.
type bankOption func(*BankMutation)

// newBankMutation creates new mutation for the Bank entity.
func newBankMutation(c config, op Op, opts ...bankOption) *BankMutation {
	m := &BankMutation{
		config:        c,
		op:            op,
		typ:           TypeBank,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBankID sets the ID field of the mutation.
func withBankID(id int) bankOption {
	return func(m *BankMutation) {
		var (
			err   error
			once  sync.Once
			value *Bank
		)
		m.oldValue = func(ctx context.Context) (*Bank, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bank.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBank sets the old Bank of the mutation.
func withBank(node *Bank) bankOption {
	return func(m *BankMutation) {
		m.oldValue = func(context.Context) (*Bank, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BankMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BankMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BankMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BankMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bank.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *BankMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BankMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BankMutation) ResetName() {
	m.name = nil
}

// SetCountry sets the "country" field.
func (m *BankMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *BankMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *BankMutation) ResetCountry() {
	m.country = nil
}

// SetWebsite sets the "website" field.
func (m *BankMutation) SetWebsite(s string) {
	m.website = &s
}

// Website returns the value of the "website" field in the mutation.
func (m *BankMutation) Website() (r string, exists bool) {
	v := m.website
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsite returns the old "website" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldWebsite(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsite: %w", err)
	}
	return oldValue.Website, nil
}

// ClearWebsite clears the value of the "website" field.
func (m *BankMutation) ClearWebsite() {
	m.website = nil
	m.clearedFields[bank.FieldWebsite] = struct{}{}
}

// WebsiteCleared returns if the "website" field was cleared in this mutation.
func (m *BankMutation) WebsiteCleared() bool {
	_, ok := m.clearedFields[bank.FieldWebsite]
	return ok
}

// ResetWebsite resets all changes to the "website" field.
func (m *BankMutation) ResetWebsite() {
	m.website = nil
	delete(m.clearedFields, bank.FieldWebsite)
}

// SetLogoURL sets the "logo_url" field.
func (m *BankMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *BankMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ClearLogoURL clears the value of the "logo_url" field.
func (m *BankMutation) ClearLogoURL() {
	m.logo_url = nil
	m.clearedFields[bank.FieldLogoURL] = struct{}{}
}

// LogoURLCleared returns if the "logo_url" field was cleared in this mutation.
func (m *BankMutation) LogoURLCleared() bool {
	_, ok := m.clearedFields[bank.FieldLogoURL]
	return ok
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *BankMutation) ResetLogoURL() {
	m.logo_url = nil
	delete(m.clearedFields, bank.FieldLogoURL)
}

// AddCurrencyRateIDs adds the "currency_rates" edge to the CurrencyRate entity by ids.
func (m *BankMutation) AddCurrencyRateIDs(ids ...int) {
	if m.currency_rates == nil {
		m.currency_rates = make(map[int]struct{})
	}
	for i := range ids {
		m.currency_rates[ids[i]] = struct{}{}
	}
}

// ClearCurrencyRates clears the "currency_rates" edge to the CurrencyRate entity.
func (m *BankMutation) ClearCurrencyRates() {
	m.clearedcurrency_rates = true
}

// CurrencyRatesCleared reports if the "currency_rates" edge to the CurrencyRate entity was cleared.
func (m *BankMutation) CurrencyRatesCleared() bool {
	return m.clearedcurrency_rates
}

// RemoveCurrencyRateIDs removes the "currency_rates" edge to the CurrencyRate entity by IDs.
func (m *BankMutation) RemoveCurrencyRateIDs(ids ...int) {
	if m.removedcurrency_rates == nil {
		m.removedcurrency_rates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.currency_rates, ids[i])
		m.removedcurrency_rates[ids[i]] = struct{}{}
	}
}

// RemovedCurrencyRates returns the removed IDs of the "currency_rates" edge to the CurrencyRate entity.
func (m *BankMutation) RemovedCurrencyRatesIDs() (ids []int) {
	for id := range m.removedcurrency_rates {
		ids = append(ids, id)
	}
	return
}

// CurrencyRatesIDs returns the "currency_rates" edge IDs in the mutation.
func (m *BankMutation) CurrencyRatesIDs() (ids []int) {
	for id := range m.currency_rates {
		ids = append(ids, id)
	}
	return
}

// ResetCurrencyRates resets all changes to the "currency_rates" edge.
func (m *BankMutation) ResetCurrencyRates() {
	m.currency_rates = nil
	m.clearedcurrency_rates = false
	m.removedcurrency_rates = nil
}

// AddOfferIDs adds the "offers" edge to the Offer entity by ids.
func (m *BankMutation) AddOfferIDs(ids ...int) {
	if m.offers == nil {
		m.offers = make(map[int]struct{})
	}
	for i := range ids {
		m.offers[ids[i]] = struct{}{}
	}
}

// ClearOffers clears the "offers" edge to the Offer entity.
func (m *BankMutation) ClearOffers() {
	m.clearedoffers = true
}

// OffersCleared reports if the "offers" edge to the Offer entity was cleared.
func (m *BankMutation) OffersCleared() bool {
	return m.clearedoffers
}

// RemoveOfferIDs removes the "offers" edge to the Offer entity by IDs.
func (m *BankMutation) RemoveOfferIDs(ids ...int) {
	if m.removedoffers == nil {
		m.removedoffers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.offers, ids[i])
		m.removedoffers[ids[i]] = struct{}{}
	}
}

// RemovedOffers returns the removed IDs of the "offers" edge to the Offer entity.
func (m *BankMutation) RemovedOffersIDs() (ids []int) {
	for id := range m.removedoffers {
		ids = append(ids, id)
	}
	return
}

// OffersIDs returns the "offers" edge IDs in the mutation.
func (m *BankMutation) OffersIDs() (ids []int) {
	for id := range m.offers {
		ids = append(ids, id)
	}
	return
}

// ResetOffers resets all changes to the "offers" edge.
func (m *BankMutation) ResetOffers() {
	m.offers = nil
	m.clearedoffers = false
	m.removedoffers = nil
}

// AddTranslationIDs adds the "translations" edge to the BankTranslation entity by ids.
func (m *BankMutation) AddTranslationIDs(ids ...int) {
	if m.translations == nil {
		m.translations = make(map[int]struct{})
	}
	for i := range ids {
		m.translations[ids[i]] = struct{}{}
	}
}

// ClearTranslations clears the "translations" edge to the BankTranslation entity.
func (m *BankMutation) ClearTranslations() {
	m.clearedtranslations = true
}

// TranslationsCleared reports if the "translations" edge to the BankTranslation entity was cleared.
func (m *BankMutation) TranslationsCleared() bool {
	return m.clearedtranslations
}

// RemoveTranslationIDs removes the "translations" edge to the BankTranslation entity by IDs.
func (m *BankMutation) RemoveTranslationIDs(ids ...int) {
	if m.removedtranslations == nil {
		m.removedtranslations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.translations, ids[i])
		m.removedtranslations[ids[i]] = struct{}{}
	}
}

// RemovedTranslations returns the removed IDs of the "translations" edge to the BankTranslation entity.
func (m *BankMutation) RemovedTranslationsIDs() (ids []int) {
	for id := range m.removedtranslations {
		ids = append(ids, id)
	}
	return
}

// TranslationsIDs returns the "translations" edge IDs in the mutation.
func (m *BankMutation) TranslationsIDs() (ids []int) {
	for id := range m.translations {
		ids = append(ids, id)
	}
	return
}

// ResetTranslations resets all changes to the "translations" edge.
func (m *BankMutation) ResetTranslations() {
	m.translations = nil
	m.clearedtranslations = false
	m.removedtranslations = nil
}

// Where appends a list predicates to the BankMutation builder.
func (m *BankMutation) Where(ps ...predicate.Bank) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BankMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BankMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bank, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BankMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BankMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bank).
func (m *BankMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BankMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, bank.FieldName)
	}
	if m.country != nil {
		fields = append(fields, bank.FieldCountry)
	}
	if m.website != nil {
		fields = append(fields, bank.FieldWebsite)
	}
	if m.logo_url != nil {
		fields = append(fields, bank.FieldLogoURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BankMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bank.FieldName:
		return m.Name()
	case bank.FieldCountry:
		return m.Country()
	case bank.FieldWebsite:
		return m.Website()
	case bank.FieldLogoURL:
		return m.LogoURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BankMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bank.FieldName:
		return m.OldName(ctx)
	case bank.FieldCountry:
		return m.OldCountry(ctx)
	case bank.FieldWebsite:
		return m.OldWebsite(ctx)
	case bank.FieldLogoURL:
		return m.OldLogoURL(ctx)
	}
	return nil, fmt.Errorf("unknown Bank field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bank.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case bank.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case bank.FieldWebsite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsite(v)
		return nil
	case bank.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	}
	return fmt.Errorf("unknown Bank field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BankMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BankMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bank numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BankMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bank.FieldWebsite) {
		fields = append(fields, bank.FieldWebsite)
	}
	if m.FieldCleared(bank.FieldLogoURL) {
		fields = append(fields, bank.FieldLogoURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BankMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BankMutation) ClearField(name string) error {
	switch name {
	case bank.FieldWebsite:
		m.ClearWebsite()
		return nil
	case bank.FieldLogoURL:
		m.ClearLogoURL()
		return nil
	}
	return fmt.Errorf("unknown Bank nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BankMutation) ResetField(name string) error {
	switch name {
	case bank.FieldName:
		m.ResetName()
		return nil
	case bank.FieldCountry:
		m.ResetCountry()
		return nil
	case bank.FieldWebsite:
		m.ResetWebsite()
		return nil
	case bank.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	}
	return fmt.Errorf("unknown Bank field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BankMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.currency_rates != nil {
		edges = append(edges, bank.EdgeCurrencyRates)
	}
	if m.offers != nil {
		edges = append(edges, bank.EdgeOffers)
	}
	if m.translations != nil {
		edges = append(edges, bank.EdgeTranslations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BankMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bank.EdgeCurrencyRates:
		ids := make([]ent.Value, 0, len(m.currency_rates))
		for id := range m.currency_rates {
			ids = append(ids, id)
		}
		return ids
	case bank.EdgeOffers:
		ids := make([]ent.Value, 0, len(m.offers))
		for id := range m.offers {
			ids = append(ids, id)
		}
		return ids
	case bank.EdgeTranslations:
		ids := make([]ent.Value, 0, len(m.translations))
		for id := range m.translations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BankMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedcurrency_rates != nil {
		edges = append(edges, bank.EdgeCurrencyRates)
	}
	if m.removedoffers != nil {
		edges = append(edges, bank.EdgeOffers)
	}
	if m.removedtranslations != nil {
		edges = append(edges, bank.EdgeTranslations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BankMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bank.EdgeCurrencyRates:
		ids := make([]ent.Value, 0, len(m.removedcurrency_rates))
		for id := range m.removedcurrency_rates {
			ids = append(ids, id)
		}
		return ids
	case bank.EdgeOffers:
		ids := make([]ent.Value, 0, len(m.removedoffers))
		for id := range m.removedoffers {
			ids = append(ids, id)
		}
		return ids
	case bank.EdgeTranslations:
		ids := make([]ent.Value, 0, len(m.removedtranslations))
		for id := range m.removedtranslations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BankMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcurrency_rates {
		edges = append(edges, bank.EdgeCurrencyRates)
	}
	if m.clearedoffers {
		edges = append(edges, bank.EdgeOffers)
	}
	if m.clearedtranslations {
		edges = append(edges, bank.EdgeTranslations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BankMutation) EdgeCleared(name string) bool {
	switch name {
	case bank.EdgeCurrencyRates:
		return m.clearedcurrency_rates
	case bank.EdgeOffers:
		return m.clearedoffers
	case bank.EdgeTranslations:
		return m.clearedtranslations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BankMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bank unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BankMutation) ResetEdge(name string) error {
	switch name {
	case bank.EdgeCurrencyRates:
		m.ResetCurrencyRates()
		return nil
	case bank.EdgeOffers:
		m.ResetOffers()
		return nil
	case bank.EdgeTranslations:
		m.ResetTranslations()
		return nil
	}
	return fmt.Errorf("unknown Bank edge %s", name)
}

// BankTranslationMutation represents an operation that mutates the BankTranslation nodes in the graph.
type BankTranslationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	locale        *string
	name          *string
	description   *string
	clearedFields map[string]struct{}
	bank          *int
	clearedbank   bool
	done          bool
	oldValue      func(context.Context) (*BankTranslation, error)
	predicates    []predicate.BankTranslation
}

var _ ent.Mutation = (*BankTranslationMutation)(nil)

// banktranslationOption allows management of the mutation configuration using functional options.
type banktranslationOption func(*BankTranslationMutation)

// newBankTranslationMutation creates new mutation for the BankTranslation entity.
func newBankTranslationMutation(c config, op Op, opts ...banktranslationOption) *BankTranslationMutation {
	m := &BankTranslationMutation{
		config:        c,
		op:            op,
		typ:           TypeBankTranslation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBankTranslationID sets the ID field of the mutation.
func withBankTranslationID(id int) banktranslationOption {
	return func(m *BankTranslationMutation) {
		var (
			err   error
			once  sync.Once
			value *BankTranslation
		)
		m.oldValue = func(ctx context.Context) (*BankTranslation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BankTranslation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBankTranslation sets the old BankTranslation of the mutation.
func withBankTranslation(node *BankTranslation) banktranslationOption {
	return func(m *BankTranslationMutation) {
		m.oldValue = func(context.Context) (*BankTranslation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BankTranslationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BankTranslationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BankTranslationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BankTranslationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BankTranslation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBankID sets the "bank_id" field.
func (m *BankTranslationMutation) SetBankID(i int) {
	m.bank = &i
}

// BankID returns the value of the "bank_id" field in the mutation.
func (m *BankTranslationMutation) BankID() (r int, exists bool) {
	v := m.bank
	if v == nil {
		return
	}
	return *v, true
}

// OldBankID returns the old "bank_id" field's value of the BankTranslation entity.
// If the BankTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTranslationMutation) OldBankID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBankID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBankID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBankID: %w", err)
	}
	return oldValue.BankID, nil
}

// ResetBankID resets all changes to the "bank_id" field.
func (m *BankTranslationMutation) ResetBankID() {
	m.bank = nil
}

// SetLocale sets the "locale" field.
func (m *BankTranslationMutation) SetLocale(s string) {
	m.locale = &s
}

// Locale returns the value of the "locale" field in the mutation.
func (m *BankTranslationMutation) Locale() (r string, exists bool) {
	v := m.locale
	if v == nil {
		return
	}
	return *v, true
}

// OldLocale returns the old "locale" field's value of the BankTranslation entity.
// If the BankTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTranslationMutation) OldLocale(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocale: %w", err)
	}
	return oldValue.Locale, nil
}

// ResetLocale resets all changes to the "locale" field.
func (m *BankTranslationMutation) ResetLocale() {
	m.locale = nil
}

// SetName sets the "name" field.
func (m *BankTranslationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BankTranslationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the BankTranslation entity.
// If the BankTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTranslationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BankTranslationMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *BankTranslationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *BankTranslationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the BankTranslation entity.
// If the BankTranslation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTranslationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *BankTranslationMutation) ResetDescription() {
	m.description = nil
}

// ClearBank clears the "bank" edge to the Bank entity.
func (m *BankTranslationMutation) ClearBank() {
	m.clearedbank = true
	m.clearedFields[banktranslation.FieldBankID] = struct{}{}
}

// BankCleared reports if the "bank" edge to the Bank entity was cleared.
func (m *BankTranslationMutation) BankCleared() bool {
	return m.clearedbank
}

// BankIDs returns the "bank" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BankID instead. It exists only for internal usage by the builders.
func (m *BankTranslationMutation) BankIDs() (ids []int) {
	if id := m.bank; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBank resets all changes to the "bank" edge.
func (m *BankTranslationMutation) ResetBank() {
	m.bank = nil
	m.clearedbank = false
}

// Where appends a list predicates to the BankTranslationMutation builder.
func (m *BankTranslationMutation) Where(ps ...predicate.BankTranslation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BankTranslationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BankTranslationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BankTranslation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BankTranslationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BankTranslationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BankTranslation).
func (m *BankTranslationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BankTranslationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.bank != nil {
		fields = append(fields, banktranslation.FieldBankID)
	}
	if m.locale != nil {
		fields = append(fields, banktranslation.FieldLocale)
	}
	if m.name != nil {
		fields = append(fields, banktranslation.FieldName)
	}
	if m.description != nil {
		fields = append(fields, banktranslation.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BankTranslationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case banktranslation.FieldBankID:
		return m.BankID()
	case banktranslation.FieldLocale:
		return m.Locale()
	case banktranslation.FieldName:
		return m.Name()
	case banktranslation.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BankTranslationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case banktranslation.FieldBankID:
		return m.OldBankID(ctx)
	case banktranslation.FieldLocale:
		return m.OldLocale(ctx)
	case banktranslation.FieldName:
		return m.OldName(ctx)
	case banktranslation.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown BankTranslation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankTranslationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case banktranslation.FieldBankID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBankID(v)
		return nil
	case banktranslation.FieldLocale:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocale(v)
		return nil
	case banktranslation.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case banktranslation.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown BankTranslation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BankTranslationMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BankTranslationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankTranslationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BankTranslation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BankTranslationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BankTranslationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BankTranslationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BankTranslation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BankTranslationMutation) ResetField(name string) error {
	switch name {
	case banktranslation.FieldBankID:
		m.ResetBankID()
		return nil
	case banktranslation.FieldLocale:
		m.ResetLocale()
		return nil
	case banktranslation.FieldName:
		m.ResetName()
		return nil
	case banktranslation.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown BankTranslation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BankTranslationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.bank != nil {
		edges = append(edges, banktranslation.EdgeBank)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BankTranslationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case banktranslation.EdgeBank:
		if id := m.bank; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BankTranslationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BankTranslationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BankTranslationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbank {
		edges = append(edges, banktranslation.EdgeBank)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BankTranslationMutation) EdgeCleared(name string) bool {
	switch name {
	case banktranslation.EdgeBank:
		return m.clearedbank
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BankTranslationMutation) ClearEdge(name string) error {
	switch name {
	case banktranslation.EdgeBank:
		m.ClearBank()
		return nil
	}
	return fmt.Errorf("unknown BankTranslation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BankTranslationMutation) ResetEdge(name string) error {
	switch name {
	case banktranslation.EdgeBank:
		m.ResetBank()
		return nil
	}
	return fmt.Errorf("unknown BankTranslation edge %s", name)
}

// CurrencyRateMutation represents an operation that mutates the CurrencyRate nodes in the graph.
type CurrencyRateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	currency      *string
	rate          *float64
	addrate       *float64
	clearedFields map[string]struct{}
	bank          *int
	clearedbank   bool
	done          bool
	oldValue      func(context.Context) (*CurrencyRate, error)
	predicates    []predicate.CurrencyRate
}

var _ ent.Mutation = (*CurrencyRateMutation)(nil)

// currencyrateOption allows management of the mutation configuration using functional options.
type currencyrateOption func(*CurrencyRateMutation)

// newCurrencyRateMutation creates new mutation for the CurrencyRate entity.
func newCurrencyRateMutation(c config, op Op, opts ...currencyrateOption) *CurrencyRateMutation {
	m := &CurrencyRateMutation{
		config:        c,
		op:            op,
		typ:           TypeCurrencyRate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCurrencyRateID sets the ID field of the mutation.
func withCurrencyRateID(id int) currencyrateOption {
	return func(m *CurrencyRateMutation) {
		var (
			err   error
			once  sync.Once
			value *CurrencyRate
		)
		m.oldValue = func(ctx context.Context) (*CurrencyRate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CurrencyRate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCurrencyRate sets the old CurrencyRate of the mutation.
func withCurrencyRate(node *CurrencyRate) currencyrateOption {
	return func(m *CurrencyRateMutation) {
		m.oldValue = func(context.Context) (*CurrencyRate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CurrencyRateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CurrencyRateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CurrencyRateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CurrencyRateMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CurrencyRate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCurrency sets the "currency" field.
func (m *CurrencyRateMutation) SetCurrency(s string) {
	m.currency = &s
}

// Currency returns the value of the "currency" field in the mutation.
func (m *CurrencyRateMutation) Currency() (r string, exists bool) {
	v := m.currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrency returns the old "currency" field's value of the CurrencyRate entity.
// If the CurrencyRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyRateMutation) OldCurrency(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrency: %w", err)
	}
	return oldValue.Currency, nil
}

// ResetCurrency resets all changes to the "currency" field.
func (m *CurrencyRateMutation) ResetCurrency() {
	m.currency = nil
}

// SetRate sets the "rate" field.
func (m *CurrencyRateMutation) SetRate(f float64) {
	m.rate = &f
	m.addrate = nil
}

// Rate returns the value of the "rate" field in the mutation.
func (m *CurrencyRateMutation) Rate() (r float64, exists bool) {
	v := m.rate
	if v == nil {
		return
	}
	return *v, true
}

// OldRate returns the old "rate" field's value of the CurrencyRate entity.
// If the CurrencyRate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CurrencyRateMutation) OldRate(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRate: %w", err)
	}
	return oldValue.Rate, nil
}

// AddRate adds f to the "rate" field.
func (m *CurrencyRateMutation) AddRate(f float64) {
	if m.addrate != nil {
		*m.addrate += f
	} else {
		m.addrate = &f
	}
}

// AddedRate returns the value that was added to the "rate" field in this mutation.
func (m *CurrencyRateMutation) AddedRate() (r float64, exists bool) {
	v := m.addrate
	if v == nil {
		return
	}
	return *v, true
}

// ResetRate resets all changes to the "rate" field.
func (m *CurrencyRateMutation) ResetRate() {
	m.rate = nil
	m.addrate = nil
}

// SetBankID sets the "bank" edge to the Bank entity by id.
func (m *CurrencyRateMutation) SetBankID(id int) {
	m.bank = &id
}

// ClearBank clears the "bank" edge to the Bank entity.
func (m *CurrencyRateMutation) ClearBank() {
	m.clearedbank = true
}

// BankCleared reports if the "bank" edge to the Bank entity was cleared.
func (m *CurrencyRateMutation) BankCleared() bool {
	return m.clearedbank
}

// BankID returns the "bank" edge ID in the mutation.
func (m *CurrencyRateMutation) BankID() (id int, exists bool) {
	if m.bank != nil {
		return *m.bank, true
	}
	return
}

// BankIDs returns the "bank" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BankID instead. It exists only for internal usage by the builders.
func (m *CurrencyRateMutation) BankIDs() (ids []int) {
	if id := m.bank; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBank resets all changes to the "bank" edge.
func (m *CurrencyRateMutation) ResetBank() {
	m.bank = nil
	m.clearedbank = false
}

// Where appends a list predicates to the CurrencyRateMutation builder.
func (m *CurrencyRateMutation) Where(ps ...predicate.CurrencyRate) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CurrencyRateMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CurrencyRateMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CurrencyRate, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CurrencyRateMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CurrencyRateMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CurrencyRate).
func (m *CurrencyRateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CurrencyRateMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.currency != nil {
		fields = append(fields, currencyrate.FieldCurrency)
	}
	if m.rate != nil {
		fields = append(fields, currencyrate.FieldRate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CurrencyRateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case currencyrate.FieldCurrency:
		return m.Currency()
	case currencyrate.FieldRate:
		return m.Rate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CurrencyRateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case currencyrate.FieldCurrency:
		return m.OldCurrency(ctx)
	case currencyrate.FieldRate:
		return m.OldRate(ctx)
	}
	return nil, fmt.Errorf("unknown CurrencyRate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CurrencyRateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case currencyrate.FieldCurrency:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrency(v)
		return nil
	case currencyrate.FieldRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRate(v)
		return nil
	}
	return fmt.Errorf("unknown CurrencyRate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CurrencyRateMutation) AddedFields() []string {
	var fields []string
	if m.addrate != nil {
		fields = append(fields, currencyrate.FieldRate)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CurrencyRateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case currencyrate.FieldRate:
		return m.AddedRate()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CurrencyRateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case currencyrate.FieldRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRate(v)
		return nil
	}
	return fmt.Errorf("unknown CurrencyRate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CurrencyRateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CurrencyRateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CurrencyRateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CurrencyRate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CurrencyRateMutation) ResetField(name string) error {
	switch name {
	case currencyrate.FieldCurrency:
		m.ResetCurrency()
		return nil
	case currencyrate.FieldRate:
		m.ResetRate()
		return nil
	}
	return fmt.Errorf("unknown CurrencyRate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CurrencyRateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.bank != nil {
		edges = append(edges, currencyrate.EdgeBank)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CurrencyRateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case currencyrate.EdgeBank:
		if id := m.bank; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CurrencyRateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CurrencyRateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CurrencyRateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbank {
		edges = append(edges, currencyrate.EdgeBank)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CurrencyRateMutation) EdgeCleared(name string) bool {
	switch name {
	case currencyrate.EdgeBank:
		return m.clearedbank
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CurrencyRateMutation) ClearEdge(name string) error {
	switch name {
	case currencyrate.EdgeBank:
		m.ClearBank()
		return nil
	}
	return fmt.Errorf("unknown CurrencyRate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CurrencyRateMutation) ResetEdge(name string) error {
	switch name {
	case currencyrate.EdgeBank:
		m.ResetBank()
		return nil
	}
	return fmt.Errorf("unknown CurrencyRate edge %s", name)
}

// OfferMutation represents an operation that mutates the Offer nodes in the graph.
type OfferMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_type         *string
	description   *string
	link          *string
	clearedFields map[string]struct{}
	bank          *int
	clearedbank   bool
	done          bool
	oldValue      func(context.Context) (*Offer, error)
	predicates    []predicate.Offer
}

var _ ent.Mutation = (*OfferMutation)(nil)

// offerOption allows management of the mutation configuration using functional options.
type offerOption func(*OfferMutation)

// newOfferMutation creates new mutation for the Offer entity.
func newOfferMutation(c config, op Op, opts ...offerOption) *OfferMutation {
	m := &OfferMutation{
		config:        c,
		op:            op,
		typ:           TypeOffer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOfferID sets the ID field of the mutation.
func withOfferID(id int) offerOption {
	return func(m *OfferMutation) {
		var (
			err   error
			once  sync.Once
			value *Offer
		)
		m.oldValue = func(ctx context.Context) (*Offer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Offer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOffer sets the old Offer of the mutation.
func withOffer(node *Offer) offerOption {
	return func(m *OfferMutation) {
		m.oldValue = func(context.Context) (*Offer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OfferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OfferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OfferMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OfferMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Offer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *OfferMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *OfferMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *OfferMutation) ResetType() {
	m._type = nil
}

// SetDescription sets the "description" field.
func (m *OfferMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *OfferMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *OfferMutation) ResetDescription() {
	m.description = nil
}

// SetLink sets the "link" field.
func (m *OfferMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *OfferMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Offer entity.
// If the Offer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OfferMutation) OldLink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ResetLink resets all changes to the "link" field.
func (m *OfferMutation) ResetLink() {
	m.link = nil
}

// SetBankID sets the "bank" edge to the Bank entity by id.
func (m *OfferMutation) SetBankID(id int) {
	m.bank = &id
}

// ClearBank clears the "bank" edge to the Bank entity.
func (m *OfferMutation) ClearBank() {
	m.clearedbank = true
}

// BankCleared reports if the "bank" edge to the Bank entity was cleared.
func (m *OfferMutation) BankCleared() bool {
	return m.clearedbank
}

// BankID returns the "bank" edge ID in the mutation.
func (m *OfferMutation) BankID() (id int, exists bool) {
	if m.bank != nil {
		return *m.bank, true
	}
	return
}

// BankIDs returns the "bank" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BankID instead. It exists only for internal usage by the builders.
func (m *OfferMutation) BankIDs() (ids []int) {
	if id := m.bank; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBank resets all changes to the "bank" edge.
func (m *OfferMutation) ResetBank() {
	m.bank = nil
	m.clearedbank = false
}

// Where appends a list predicates to the OfferMutation builder.
func (m *OfferMutation) Where(ps ...predicate.Offer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OfferMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OfferMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Offer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OfferMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OfferMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Offer).
func (m *OfferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OfferMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, offer.FieldType)
	}
	if m.description != nil {
		fields = append(fields, offer.FieldDescription)
	}
	if m.link != nil {
		fields = append(fields, offer.FieldLink)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OfferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case offer.FieldType:
		return m.GetType()
	case offer.FieldDescription:
		return m.Description()
	case offer.FieldLink:
		return m.Link()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OfferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case offer.FieldType:
		return m.OldType(ctx)
	case offer.FieldDescription:
		return m.OldDescription(ctx)
	case offer.FieldLink:
		return m.OldLink(ctx)
	}
	return nil, fmt.Errorf("unknown Offer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OfferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case offer.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case offer.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case offer.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	}
	return fmt.Errorf("unknown Offer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OfferMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OfferMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OfferMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Offer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OfferMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OfferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OfferMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Offer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OfferMutation) ResetField(name string) error {
	switch name {
	case offer.FieldType:
		m.ResetType()
		return nil
	case offer.FieldDescription:
		m.ResetDescription()
		return nil
	case offer.FieldLink:
		m.ResetLink()
		return nil
	}
	return fmt.Errorf("unknown Offer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OfferMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.bank != nil {
		edges = append(edges, offer.EdgeBank)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OfferMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case offer.EdgeBank:
		if id := m.bank; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OfferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OfferMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OfferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbank {
		edges = append(edges, offer.EdgeBank)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OfferMutation) EdgeCleared(name string) bool {
	switch name {
	case offer.EdgeBank:
		return m.clearedbank
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OfferMutation) ClearEdge(name string) error {
	switch name {
	case offer.EdgeBank:
		m.ClearBank()
		return nil
	}
	return fmt.Errorf("unknown Offer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OfferMutation) ResetEdge(name string) error {
	switch name {
	case offer.EdgeBank:
		m.ResetBank()
		return nil
	}
	return fmt.Errorf("unknown Offer edge %s", name)
}
