// Code generated by ent, DO NOT EDIT.

package ogent

import "mybanks-api/ent"

func NewBankCreate(e *ent.Bank) *BankCreate {
	if e == nil {
		return nil
	}
	var ret BankCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Country = e.Country
	ret.Website = NewOptString(e.Website)
	ret.LogoURL = NewOptString(e.LogoURL)
	ret.Test = NewOptString(e.Test)
	return &ret
}

func NewBankCreates(es []*ent.Bank) []BankCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]BankCreate, len(es))
	for i, e := range es {
		r[i] = NewBankCreate(e).Elem()
	}
	return r
}

func (b *BankCreate) Elem() BankCreate {
	if b == nil {
		return BankCreate{}
	}
	return *b
}

func NewBankList(e *ent.Bank) *BankList {
	if e == nil {
		return nil
	}
	var ret BankList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Country = e.Country
	ret.Website = NewOptString(e.Website)
	ret.LogoURL = NewOptString(e.LogoURL)
	ret.Test = NewOptString(e.Test)
	return &ret
}

func NewBankLists(es []*ent.Bank) []BankList {
	if len(es) == 0 {
		return nil
	}
	r := make([]BankList, len(es))
	for i, e := range es {
		r[i] = NewBankList(e).Elem()
	}
	return r
}

func (b *BankList) Elem() BankList {
	if b == nil {
		return BankList{}
	}
	return *b
}

func NewBankRead(e *ent.Bank) *BankRead {
	if e == nil {
		return nil
	}
	var ret BankRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Country = e.Country
	ret.Website = NewOptString(e.Website)
	ret.LogoURL = NewOptString(e.LogoURL)
	ret.Test = NewOptString(e.Test)
	return &ret
}

func NewBankReads(es []*ent.Bank) []BankRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]BankRead, len(es))
	for i, e := range es {
		r[i] = NewBankRead(e).Elem()
	}
	return r
}

func (b *BankRead) Elem() BankRead {
	if b == nil {
		return BankRead{}
	}
	return *b
}

func NewBankUpdate(e *ent.Bank) *BankUpdate {
	if e == nil {
		return nil
	}
	var ret BankUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Country = e.Country
	ret.Website = NewOptString(e.Website)
	ret.LogoURL = NewOptString(e.LogoURL)
	ret.Test = NewOptString(e.Test)
	return &ret
}

func NewBankUpdates(es []*ent.Bank) []BankUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]BankUpdate, len(es))
	for i, e := range es {
		r[i] = NewBankUpdate(e).Elem()
	}
	return r
}

func (b *BankUpdate) Elem() BankUpdate {
	if b == nil {
		return BankUpdate{}
	}
	return *b
}

func NewBankCurrencyRatesList(e *ent.CurrencyRate) *BankCurrencyRatesList {
	if e == nil {
		return nil
	}
	var ret BankCurrencyRatesList
	ret.ID = e.ID
	ret.Currency = e.Currency
	ret.Rate = e.Rate
	return &ret
}

func NewBankCurrencyRatesLists(es []*ent.CurrencyRate) []BankCurrencyRatesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]BankCurrencyRatesList, len(es))
	for i, e := range es {
		r[i] = NewBankCurrencyRatesList(e).Elem()
	}
	return r
}

func (cr *BankCurrencyRatesList) Elem() BankCurrencyRatesList {
	if cr == nil {
		return BankCurrencyRatesList{}
	}
	return *cr
}

func NewBankOffersList(e *ent.Offer) *BankOffersList {
	if e == nil {
		return nil
	}
	var ret BankOffersList
	ret.ID = e.ID
	ret.Type = e.Type
	ret.Description = e.Description
	ret.Link = e.Link
	return &ret
}

func NewBankOffersLists(es []*ent.Offer) []BankOffersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]BankOffersList, len(es))
	for i, e := range es {
		r[i] = NewBankOffersList(e).Elem()
	}
	return r
}

func (o *BankOffersList) Elem() BankOffersList {
	if o == nil {
		return BankOffersList{}
	}
	return *o
}

func NewCurrencyRateCreate(e *ent.CurrencyRate) *CurrencyRateCreate {
	if e == nil {
		return nil
	}
	var ret CurrencyRateCreate
	ret.ID = e.ID
	ret.Currency = e.Currency
	ret.Rate = e.Rate
	return &ret
}

func NewCurrencyRateCreates(es []*ent.CurrencyRate) []CurrencyRateCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CurrencyRateCreate, len(es))
	for i, e := range es {
		r[i] = NewCurrencyRateCreate(e).Elem()
	}
	return r
}

func (cr *CurrencyRateCreate) Elem() CurrencyRateCreate {
	if cr == nil {
		return CurrencyRateCreate{}
	}
	return *cr
}

func NewCurrencyRateList(e *ent.CurrencyRate) *CurrencyRateList {
	if e == nil {
		return nil
	}
	var ret CurrencyRateList
	ret.ID = e.ID
	ret.Currency = e.Currency
	ret.Rate = e.Rate
	return &ret
}

func NewCurrencyRateLists(es []*ent.CurrencyRate) []CurrencyRateList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CurrencyRateList, len(es))
	for i, e := range es {
		r[i] = NewCurrencyRateList(e).Elem()
	}
	return r
}

func (cr *CurrencyRateList) Elem() CurrencyRateList {
	if cr == nil {
		return CurrencyRateList{}
	}
	return *cr
}

func NewCurrencyRateRead(e *ent.CurrencyRate) *CurrencyRateRead {
	if e == nil {
		return nil
	}
	var ret CurrencyRateRead
	ret.ID = e.ID
	ret.Currency = e.Currency
	ret.Rate = e.Rate
	return &ret
}

func NewCurrencyRateReads(es []*ent.CurrencyRate) []CurrencyRateRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CurrencyRateRead, len(es))
	for i, e := range es {
		r[i] = NewCurrencyRateRead(e).Elem()
	}
	return r
}

func (cr *CurrencyRateRead) Elem() CurrencyRateRead {
	if cr == nil {
		return CurrencyRateRead{}
	}
	return *cr
}

func NewCurrencyRateUpdate(e *ent.CurrencyRate) *CurrencyRateUpdate {
	if e == nil {
		return nil
	}
	var ret CurrencyRateUpdate
	ret.ID = e.ID
	ret.Currency = e.Currency
	ret.Rate = e.Rate
	return &ret
}

func NewCurrencyRateUpdates(es []*ent.CurrencyRate) []CurrencyRateUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CurrencyRateUpdate, len(es))
	for i, e := range es {
		r[i] = NewCurrencyRateUpdate(e).Elem()
	}
	return r
}

func (cr *CurrencyRateUpdate) Elem() CurrencyRateUpdate {
	if cr == nil {
		return CurrencyRateUpdate{}
	}
	return *cr
}

func NewCurrencyRateBankRead(e *ent.Bank) *CurrencyRateBankRead {
	if e == nil {
		return nil
	}
	var ret CurrencyRateBankRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Country = e.Country
	ret.Website = NewOptString(e.Website)
	ret.LogoURL = NewOptString(e.LogoURL)
	ret.Test = NewOptString(e.Test)
	return &ret
}

func NewCurrencyRateBankReads(es []*ent.Bank) []CurrencyRateBankRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CurrencyRateBankRead, len(es))
	for i, e := range es {
		r[i] = NewCurrencyRateBankRead(e).Elem()
	}
	return r
}

func (b *CurrencyRateBankRead) Elem() CurrencyRateBankRead {
	if b == nil {
		return CurrencyRateBankRead{}
	}
	return *b
}

func NewOfferCreate(e *ent.Offer) *OfferCreate {
	if e == nil {
		return nil
	}
	var ret OfferCreate
	ret.ID = e.ID
	ret.Type = e.Type
	ret.Description = e.Description
	ret.Link = e.Link
	return &ret
}

func NewOfferCreates(es []*ent.Offer) []OfferCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]OfferCreate, len(es))
	for i, e := range es {
		r[i] = NewOfferCreate(e).Elem()
	}
	return r
}

func (o *OfferCreate) Elem() OfferCreate {
	if o == nil {
		return OfferCreate{}
	}
	return *o
}

func NewOfferList(e *ent.Offer) *OfferList {
	if e == nil {
		return nil
	}
	var ret OfferList
	ret.ID = e.ID
	ret.Type = e.Type
	ret.Description = e.Description
	ret.Link = e.Link
	return &ret
}

func NewOfferLists(es []*ent.Offer) []OfferList {
	if len(es) == 0 {
		return nil
	}
	r := make([]OfferList, len(es))
	for i, e := range es {
		r[i] = NewOfferList(e).Elem()
	}
	return r
}

func (o *OfferList) Elem() OfferList {
	if o == nil {
		return OfferList{}
	}
	return *o
}

func NewOfferRead(e *ent.Offer) *OfferRead {
	if e == nil {
		return nil
	}
	var ret OfferRead
	ret.ID = e.ID
	ret.Type = e.Type
	ret.Description = e.Description
	ret.Link = e.Link
	return &ret
}

func NewOfferReads(es []*ent.Offer) []OfferRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]OfferRead, len(es))
	for i, e := range es {
		r[i] = NewOfferRead(e).Elem()
	}
	return r
}

func (o *OfferRead) Elem() OfferRead {
	if o == nil {
		return OfferRead{}
	}
	return *o
}

func NewOfferUpdate(e *ent.Offer) *OfferUpdate {
	if e == nil {
		return nil
	}
	var ret OfferUpdate
	ret.ID = e.ID
	ret.Type = e.Type
	ret.Description = e.Description
	ret.Link = e.Link
	return &ret
}

func NewOfferUpdates(es []*ent.Offer) []OfferUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]OfferUpdate, len(es))
	for i, e := range es {
		r[i] = NewOfferUpdate(e).Elem()
	}
	return r
}

func (o *OfferUpdate) Elem() OfferUpdate {
	if o == nil {
		return OfferUpdate{}
	}
	return *o
}

func NewOfferBankRead(e *ent.Bank) *OfferBankRead {
	if e == nil {
		return nil
	}
	var ret OfferBankRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Country = e.Country
	ret.Website = NewOptString(e.Website)
	ret.LogoURL = NewOptString(e.LogoURL)
	ret.Test = NewOptString(e.Test)
	return &ret
}

func NewOfferBankReads(es []*ent.Bank) []OfferBankRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]OfferBankRead, len(es))
	for i, e := range es {
		r[i] = NewOfferBankRead(e).Elem()
	}
	return r
}

func (b *OfferBankRead) Elem() OfferBankRead {
	if b == nil {
		return OfferBankRead{}
	}
	return *b
}
