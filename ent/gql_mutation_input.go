// Code generated by ent, DO NOT EDIT.

package ent

// CreateBankInput represents a mutation input for creating banks.
type CreateBankInput struct {
	Name            string
	Country         string
	Website         *string
	LogoURL         *string
	CurrencyRateIDs []int
	OfferIDs        []int
	TranslationIDs  []int
}

// Mutate applies the CreateBankInput on the BankMutation builder.
func (i *CreateBankInput) Mutate(m *BankMutation) {
	m.SetName(i.Name)
	m.SetCountry(i.Country)
	if v := i.Website; v != nil {
		m.SetWebsite(*v)
	}
	if v := i.LogoURL; v != nil {
		m.SetLogoURL(*v)
	}
	if v := i.CurrencyRateIDs; len(v) > 0 {
		m.AddCurrencyRateIDs(v...)
	}
	if v := i.OfferIDs; len(v) > 0 {
		m.AddOfferIDs(v...)
	}
	if v := i.TranslationIDs; len(v) > 0 {
		m.AddTranslationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateBankInput on the BankCreate builder.
func (c *BankCreate) SetInput(i CreateBankInput) *BankCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateBankInput represents a mutation input for updating banks.
type UpdateBankInput struct {
	Name                  *string
	Country               *string
	ClearWebsite          bool
	Website               *string
	ClearLogoURL          bool
	LogoURL               *string
	ClearCurrencyRates    bool
	AddCurrencyRateIDs    []int
	RemoveCurrencyRateIDs []int
	ClearOffers           bool
	AddOfferIDs           []int
	RemoveOfferIDs        []int
	ClearTranslations     bool
	AddTranslationIDs     []int
	RemoveTranslationIDs  []int
}

// Mutate applies the UpdateBankInput on the BankMutation builder.
func (i *UpdateBankInput) Mutate(m *BankMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Country; v != nil {
		m.SetCountry(*v)
	}
	if i.ClearWebsite {
		m.ClearWebsite()
	}
	if v := i.Website; v != nil {
		m.SetWebsite(*v)
	}
	if i.ClearLogoURL {
		m.ClearLogoURL()
	}
	if v := i.LogoURL; v != nil {
		m.SetLogoURL(*v)
	}
	if i.ClearCurrencyRates {
		m.ClearCurrencyRates()
	}
	if v := i.AddCurrencyRateIDs; len(v) > 0 {
		m.AddCurrencyRateIDs(v...)
	}
	if v := i.RemoveCurrencyRateIDs; len(v) > 0 {
		m.RemoveCurrencyRateIDs(v...)
	}
	if i.ClearOffers {
		m.ClearOffers()
	}
	if v := i.AddOfferIDs; len(v) > 0 {
		m.AddOfferIDs(v...)
	}
	if v := i.RemoveOfferIDs; len(v) > 0 {
		m.RemoveOfferIDs(v...)
	}
	if i.ClearTranslations {
		m.ClearTranslations()
	}
	if v := i.AddTranslationIDs; len(v) > 0 {
		m.AddTranslationIDs(v...)
	}
	if v := i.RemoveTranslationIDs; len(v) > 0 {
		m.RemoveTranslationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateBankInput on the BankUpdate builder.
func (c *BankUpdate) SetInput(i UpdateBankInput) *BankUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateBankInput on the BankUpdateOne builder.
func (c *BankUpdateOne) SetInput(i UpdateBankInput) *BankUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCurrencyRateInput represents a mutation input for creating currencyrates.
type CreateCurrencyRateInput struct {
	Currency string
	Rate     float64
	BankID   int
}

// Mutate applies the CreateCurrencyRateInput on the CurrencyRateMutation builder.
func (i *CreateCurrencyRateInput) Mutate(m *CurrencyRateMutation) {
	m.SetCurrency(i.Currency)
	m.SetRate(i.Rate)
	m.SetBankID(i.BankID)
}

// SetInput applies the change-set in the CreateCurrencyRateInput on the CurrencyRateCreate builder.
func (c *CurrencyRateCreate) SetInput(i CreateCurrencyRateInput) *CurrencyRateCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCurrencyRateInput represents a mutation input for updating currencyrates.
type UpdateCurrencyRateInput struct {
	Currency *string
	Rate     *float64
	BankID   *int
}

// Mutate applies the UpdateCurrencyRateInput on the CurrencyRateMutation builder.
func (i *UpdateCurrencyRateInput) Mutate(m *CurrencyRateMutation) {
	if v := i.Currency; v != nil {
		m.SetCurrency(*v)
	}
	if v := i.Rate; v != nil {
		m.SetRate(*v)
	}
	if v := i.BankID; v != nil {
		m.SetBankID(*v)
	}
}

// SetInput applies the change-set in the UpdateCurrencyRateInput on the CurrencyRateUpdate builder.
func (c *CurrencyRateUpdate) SetInput(i UpdateCurrencyRateInput) *CurrencyRateUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCurrencyRateInput on the CurrencyRateUpdateOne builder.
func (c *CurrencyRateUpdateOne) SetInput(i UpdateCurrencyRateInput) *CurrencyRateUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOfferInput represents a mutation input for creating offers.
type CreateOfferInput struct {
	Type        string
	Description string
	Link        string
	BankID      int
}

// Mutate applies the CreateOfferInput on the OfferMutation builder.
func (i *CreateOfferInput) Mutate(m *OfferMutation) {
	m.SetType(i.Type)
	m.SetDescription(i.Description)
	m.SetLink(i.Link)
	m.SetBankID(i.BankID)
}

// SetInput applies the change-set in the CreateOfferInput on the OfferCreate builder.
func (c *OfferCreate) SetInput(i CreateOfferInput) *OfferCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOfferInput represents a mutation input for updating offers.
type UpdateOfferInput struct {
	Type        *string
	Description *string
	Link        *string
	BankID      *int
}

// Mutate applies the UpdateOfferInput on the OfferMutation builder.
func (i *UpdateOfferInput) Mutate(m *OfferMutation) {
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Link; v != nil {
		m.SetLink(*v)
	}
	if v := i.BankID; v != nil {
		m.SetBankID(*v)
	}
}

// SetInput applies the change-set in the UpdateOfferInput on the OfferUpdate builder.
func (c *OfferUpdate) SetInput(i UpdateOfferInput) *OfferUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOfferInput on the OfferUpdateOne builder.
func (c *OfferUpdateOne) SetInput(i UpdateOfferInput) *OfferUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
