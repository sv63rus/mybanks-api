// Code generated by ent, DO NOT EDIT.

package bank

import (
	"mybanks-api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldName, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldCountry, v))
}

// Website applies equality check predicate on the "website" field. It's identical to WebsiteEQ.
func Website(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldWebsite, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldLogoURL, v))
}

// Test applies equality check predicate on the "test" field. It's identical to TestEQ.
func Test(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldTest, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldName, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldCountry, v))
}

// WebsiteEQ applies the EQ predicate on the "website" field.
func WebsiteEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldWebsite, v))
}

// WebsiteNEQ applies the NEQ predicate on the "website" field.
func WebsiteNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldWebsite, v))
}

// WebsiteIn applies the In predicate on the "website" field.
func WebsiteIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldWebsite, vs...))
}

// WebsiteNotIn applies the NotIn predicate on the "website" field.
func WebsiteNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldWebsite, vs...))
}

// WebsiteGT applies the GT predicate on the "website" field.
func WebsiteGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldWebsite, v))
}

// WebsiteGTE applies the GTE predicate on the "website" field.
func WebsiteGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldWebsite, v))
}

// WebsiteLT applies the LT predicate on the "website" field.
func WebsiteLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldWebsite, v))
}

// WebsiteLTE applies the LTE predicate on the "website" field.
func WebsiteLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldWebsite, v))
}

// WebsiteContains applies the Contains predicate on the "website" field.
func WebsiteContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldWebsite, v))
}

// WebsiteHasPrefix applies the HasPrefix predicate on the "website" field.
func WebsiteHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldWebsite, v))
}

// WebsiteHasSuffix applies the HasSuffix predicate on the "website" field.
func WebsiteHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldWebsite, v))
}

// WebsiteIsNil applies the IsNil predicate on the "website" field.
func WebsiteIsNil() predicate.Bank {
	return predicate.Bank(sql.FieldIsNull(FieldWebsite))
}

// WebsiteNotNil applies the NotNil predicate on the "website" field.
func WebsiteNotNil() predicate.Bank {
	return predicate.Bank(sql.FieldNotNull(FieldWebsite))
}

// WebsiteEqualFold applies the EqualFold predicate on the "website" field.
func WebsiteEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldWebsite, v))
}

// WebsiteContainsFold applies the ContainsFold predicate on the "website" field.
func WebsiteContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldWebsite, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logo_url" field.
func LogoURLIsNil() predicate.Bank {
	return predicate.Bank(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logo_url" field.
func LogoURLNotNil() predicate.Bank {
	return predicate.Bank(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldLogoURL, v))
}

// TestEQ applies the EQ predicate on the "test" field.
func TestEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldTest, v))
}

// TestNEQ applies the NEQ predicate on the "test" field.
func TestNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldTest, v))
}

// TestIn applies the In predicate on the "test" field.
func TestIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldTest, vs...))
}

// TestNotIn applies the NotIn predicate on the "test" field.
func TestNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldTest, vs...))
}

// TestGT applies the GT predicate on the "test" field.
func TestGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldTest, v))
}

// TestGTE applies the GTE predicate on the "test" field.
func TestGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldTest, v))
}

// TestLT applies the LT predicate on the "test" field.
func TestLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldTest, v))
}

// TestLTE applies the LTE predicate on the "test" field.
func TestLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldTest, v))
}

// TestContains applies the Contains predicate on the "test" field.
func TestContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldTest, v))
}

// TestHasPrefix applies the HasPrefix predicate on the "test" field.
func TestHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldTest, v))
}

// TestHasSuffix applies the HasSuffix predicate on the "test" field.
func TestHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldTest, v))
}

// TestIsNil applies the IsNil predicate on the "test" field.
func TestIsNil() predicate.Bank {
	return predicate.Bank(sql.FieldIsNull(FieldTest))
}

// TestNotNil applies the NotNil predicate on the "test" field.
func TestNotNil() predicate.Bank {
	return predicate.Bank(sql.FieldNotNull(FieldTest))
}

// TestEqualFold applies the EqualFold predicate on the "test" field.
func TestEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldTest, v))
}

// TestContainsFold applies the ContainsFold predicate on the "test" field.
func TestContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldTest, v))
}

// HasCurrencyRates applies the HasEdge predicate on the "currency_rates" edge.
func HasCurrencyRates() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CurrencyRatesTable, CurrencyRatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCurrencyRatesWith applies the HasEdge predicate on the "currency_rates" edge with a given conditions (other predicates).
func HasCurrencyRatesWith(preds ...predicate.CurrencyRate) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := newCurrencyRatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOffers applies the HasEdge predicate on the "offers" edge.
func HasOffers() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OffersTable, OffersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOffersWith applies the HasEdge predicate on the "offers" edge with a given conditions (other predicates).
func HasOffersWith(preds ...predicate.Offer) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := newOffersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bank) predicate.Bank {
	return predicate.Bank(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bank) predicate.Bank {
	return predicate.Bank(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bank) predicate.Bank {
	return predicate.Bank(sql.NotPredicates(p))
}
