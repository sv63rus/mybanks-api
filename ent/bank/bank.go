// Code generated by ent, DO NOT EDIT.

package bank

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bank type in the database.
	Label = "bank"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCountry holds the string denoting the country field in the database.
	FieldCountry = "country"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldLogoURL holds the string denoting the logo_url field in the database.
	FieldLogoURL = "logo_url"
	// EdgeCurrencyRates holds the string denoting the currency_rates edge name in mutations.
	EdgeCurrencyRates = "currency_rates"
	// EdgeOffers holds the string denoting the offers edge name in mutations.
	EdgeOffers = "offers"
	// EdgeTranslations holds the string denoting the translations edge name in mutations.
	EdgeTranslations = "translations"
	// Table holds the table name of the bank in the database.
	Table = "banks"
	// CurrencyRatesTable is the table that holds the currency_rates relation/edge.
	CurrencyRatesTable = "currency_rates"
	// CurrencyRatesInverseTable is the table name for the CurrencyRate entity.
	// It exists in this package in order to avoid circular dependency with the "currencyrate" package.
	CurrencyRatesInverseTable = "currency_rates"
	// CurrencyRatesColumn is the table column denoting the currency_rates relation/edge.
	CurrencyRatesColumn = "bank_currency_rates"
	// OffersTable is the table that holds the offers relation/edge.
	OffersTable = "offers"
	// OffersInverseTable is the table name for the Offer entity.
	// It exists in this package in order to avoid circular dependency with the "offer" package.
	OffersInverseTable = "offers"
	// OffersColumn is the table column denoting the offers relation/edge.
	OffersColumn = "bank_offers"
	// TranslationsTable is the table that holds the translations relation/edge.
	TranslationsTable = "bank_translations"
	// TranslationsInverseTable is the table name for the BankTranslation entity.
	// It exists in this package in order to avoid circular dependency with the "banktranslation" package.
	TranslationsInverseTable = "bank_translations"
	// TranslationsColumn is the table column denoting the translations relation/edge.
	TranslationsColumn = "bank_id"
)

// Columns holds all SQL columns for bank fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCountry,
	FieldWebsite,
	FieldLogoURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Bank queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCountry orders the results by the country field.
func ByCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCountry, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByLogoURL orders the results by the logo_url field.
func ByLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoURL, opts...).ToFunc()
}

// ByCurrencyRatesCount orders the results by currency_rates count.
func ByCurrencyRatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCurrencyRatesStep(), opts...)
	}
}

// ByCurrencyRates orders the results by currency_rates terms.
func ByCurrencyRates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrencyRatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOffersCount orders the results by offers count.
func ByOffersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOffersStep(), opts...)
	}
}

// ByOffers orders the results by offers terms.
func ByOffers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOffersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTranslationsCount orders the results by translations count.
func ByTranslationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranslationsStep(), opts...)
	}
}

// ByTranslations orders the results by translations terms.
func ByTranslations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranslationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCurrencyRatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrencyRatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CurrencyRatesTable, CurrencyRatesColumn),
	)
}
func newOffersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OffersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OffersTable, OffersColumn),
	)
}
func newTranslationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranslationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranslationsTable, TranslationsColumn),
	)
}
