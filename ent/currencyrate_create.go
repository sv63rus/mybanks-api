// Code generated by ent, DO NOT EDIT.

package ent

import (
	"MyBank-Go-Backend/ent/bank"
	"MyBank-Go-Backend/ent/currencyrate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CurrencyRateCreate is the builder for creating a CurrencyRate entity.
type CurrencyRateCreate struct {
	config
	mutation *CurrencyRateMutation
	hooks    []Hook
}

// SetCurrency sets the "currency" field.
func (crc *CurrencyRateCreate) SetCurrency(s string) *CurrencyRateCreate {
	crc.mutation.SetCurrency(s)
	return crc
}

// SetRate sets the "rate" field.
func (crc *CurrencyRateCreate) SetRate(f float64) *CurrencyRateCreate {
	crc.mutation.SetRate(f)
	return crc
}

// SetBankID sets the "bank" edge to the Bank entity by ID.
func (crc *CurrencyRateCreate) SetBankID(id int) *CurrencyRateCreate {
	crc.mutation.SetBankID(id)
	return crc
}

// SetBank sets the "bank" edge to the Bank entity.
func (crc *CurrencyRateCreate) SetBank(b *Bank) *CurrencyRateCreate {
	return crc.SetBankID(b.ID)
}

// Mutation returns the CurrencyRateMutation object of the builder.
func (crc *CurrencyRateCreate) Mutation() *CurrencyRateMutation {
	return crc.mutation
}

// Save creates the CurrencyRate in the database.
func (crc *CurrencyRateCreate) Save(ctx context.Context) (*CurrencyRate, error) {
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CurrencyRateCreate) SaveX(ctx context.Context) *CurrencyRate {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CurrencyRateCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CurrencyRateCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CurrencyRateCreate) check() error {
	if _, ok := crc.mutation.Currency(); !ok {
		return &ValidationError{Name: "currency", err: errors.New(`ent: missing required field "CurrencyRate.currency"`)}
	}
	if _, ok := crc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "CurrencyRate.rate"`)}
	}
	if len(crc.mutation.BankIDs()) == 0 {
		return &ValidationError{Name: "bank", err: errors.New(`ent: missing required edge "CurrencyRate.bank"`)}
	}
	return nil
}

func (crc *CurrencyRateCreate) sqlSave(ctx context.Context) (*CurrencyRate, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CurrencyRateCreate) createSpec() (*CurrencyRate, *sqlgraph.CreateSpec) {
	var (
		_node = &CurrencyRate{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(currencyrate.Table, sqlgraph.NewFieldSpec(currencyrate.FieldID, field.TypeInt))
	)
	if value, ok := crc.mutation.Currency(); ok {
		_spec.SetField(currencyrate.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := crc.mutation.Rate(); ok {
		_spec.SetField(currencyrate.FieldRate, field.TypeFloat64, value)
		_node.Rate = value
	}
	if nodes := crc.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   currencyrate.BankTable,
			Columns: []string{currencyrate.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.bank_currency_rates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CurrencyRateCreateBulk is the builder for creating many CurrencyRate entities in bulk.
type CurrencyRateCreateBulk struct {
	config
	err      error
	builders []*CurrencyRateCreate
}

// Save creates the CurrencyRate entities in the database.
func (crcb *CurrencyRateCreateBulk) Save(ctx context.Context) ([]*CurrencyRate, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CurrencyRate, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CurrencyRateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CurrencyRateCreateBulk) SaveX(ctx context.Context) []*CurrencyRate {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CurrencyRateCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CurrencyRateCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}
