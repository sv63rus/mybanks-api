// Code generated by ent, DO NOT EDIT.

package banktranslation

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the banktranslation type in the database.
	Label = "bank_translation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBankID holds the string denoting the bank_id field in the database.
	FieldBankID = "bank_id"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeBank holds the string denoting the bank edge name in mutations.
	EdgeBank = "bank"
	// Table holds the table name of the banktranslation in the database.
	Table = "bank_translations"
	// BankTable is the table that holds the bank relation/edge.
	BankTable = "bank_translations"
	// BankInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	BankInverseTable = "banks"
	// BankColumn is the table column denoting the bank relation/edge.
	BankColumn = "bank_id"
)

// Columns holds all SQL columns for banktranslation fields.
var Columns = []string{
	FieldID,
	FieldBankID,
	FieldLocale,
	FieldName,
	FieldDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LocaleValidator is a validator for the "locale" field. It is called by the builders before save.
	LocaleValidator func(string) error
)

// OrderOption defines the ordering options for the BankTranslation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBankID orders the results by the bank_id field.
func ByBankID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankID, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByBankField orders the results by bank field.
func ByBankField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBankStep(), sql.OrderByField(field, opts...))
	}
}
func newBankStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BankInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
	)
}
