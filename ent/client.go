// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"MyBank-Go-Backend/ent/migrate"

	"MyBank-Go-Backend/ent/bank"
	"MyBank-Go-Backend/ent/currencyrate"
	"MyBank-Go-Backend/ent/offer"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bank is the client for interacting with the Bank builders.
	Bank *BankClient
	// CurrencyRate is the client for interacting with the CurrencyRate builders.
	CurrencyRate *CurrencyRateClient
	// Offer is the client for interacting with the Offer builders.
	Offer *OfferClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bank = NewBankClient(c.config)
	c.CurrencyRate = NewCurrencyRateClient(c.config)
	c.Offer = NewOfferClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Bank:         NewBankClient(cfg),
		CurrencyRate: NewCurrencyRateClient(cfg),
		Offer:        NewOfferClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Bank:         NewBankClient(cfg),
		CurrencyRate: NewCurrencyRateClient(cfg),
		Offer:        NewOfferClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bank.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bank.Use(hooks...)
	c.CurrencyRate.Use(hooks...)
	c.Offer.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Bank.Intercept(interceptors...)
	c.CurrencyRate.Intercept(interceptors...)
	c.Offer.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BankMutation:
		return c.Bank.mutate(ctx, m)
	case *CurrencyRateMutation:
		return c.CurrencyRate.mutate(ctx, m)
	case *OfferMutation:
		return c.Offer.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BankClient is a client for the Bank schema.
type BankClient struct {
	config
}

// NewBankClient returns a client for the Bank from the given config.
func NewBankClient(c config) *BankClient {
	return &BankClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bank.Hooks(f(g(h())))`.
func (c *BankClient) Use(hooks ...Hook) {
	c.hooks.Bank = append(c.hooks.Bank, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bank.Intercept(f(g(h())))`.
func (c *BankClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bank = append(c.inters.Bank, interceptors...)
}

// Create returns a builder for creating a Bank entity.
func (c *BankClient) Create() *BankCreate {
	mutation := newBankMutation(c.config, OpCreate)
	return &BankCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bank entities.
func (c *BankClient) CreateBulk(builders ...*BankCreate) *BankCreateBulk {
	return &BankCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BankClient) MapCreateBulk(slice any, setFunc func(*BankCreate, int)) *BankCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BankCreateBulk{err: fmt.Errorf("calling to BankClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BankCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BankCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bank.
func (c *BankClient) Update() *BankUpdate {
	mutation := newBankMutation(c.config, OpUpdate)
	return &BankUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BankClient) UpdateOne(b *Bank) *BankUpdateOne {
	mutation := newBankMutation(c.config, OpUpdateOne, withBank(b))
	return &BankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BankClient) UpdateOneID(id int) *BankUpdateOne {
	mutation := newBankMutation(c.config, OpUpdateOne, withBankID(id))
	return &BankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bank.
func (c *BankClient) Delete() *BankDelete {
	mutation := newBankMutation(c.config, OpDelete)
	return &BankDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BankClient) DeleteOne(b *Bank) *BankDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BankClient) DeleteOneID(id int) *BankDeleteOne {
	builder := c.Delete().Where(bank.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BankDeleteOne{builder}
}

// Query returns a query builder for Bank.
func (c *BankClient) Query() *BankQuery {
	return &BankQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBank},
		inters: c.Interceptors(),
	}
}

// Get returns a Bank entity by its id.
func (c *BankClient) Get(ctx context.Context, id int) (*Bank, error) {
	return c.Query().Where(bank.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BankClient) GetX(ctx context.Context, id int) *Bank {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCurrencyRates queries the currency_rates edge of a Bank.
func (c *BankClient) QueryCurrencyRates(b *Bank) *CurrencyRateQuery {
	query := (&CurrencyRateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bank.Table, bank.FieldID, id),
			sqlgraph.To(currencyrate.Table, currencyrate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bank.CurrencyRatesTable, bank.CurrencyRatesColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOffers queries the offers edge of a Bank.
func (c *BankClient) QueryOffers(b *Bank) *OfferQuery {
	query := (&OfferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bank.Table, bank.FieldID, id),
			sqlgraph.To(offer.Table, offer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bank.OffersTable, bank.OffersColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BankClient) Hooks() []Hook {
	return c.hooks.Bank
}

// Interceptors returns the client interceptors.
func (c *BankClient) Interceptors() []Interceptor {
	return c.inters.Bank
}

func (c *BankClient) mutate(ctx context.Context, m *BankMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BankCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BankUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BankUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BankDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Bank mutation op: %q", m.Op())
	}
}

// CurrencyRateClient is a client for the CurrencyRate schema.
type CurrencyRateClient struct {
	config
}

// NewCurrencyRateClient returns a client for the CurrencyRate from the given config.
func NewCurrencyRateClient(c config) *CurrencyRateClient {
	return &CurrencyRateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `currencyrate.Hooks(f(g(h())))`.
func (c *CurrencyRateClient) Use(hooks ...Hook) {
	c.hooks.CurrencyRate = append(c.hooks.CurrencyRate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `currencyrate.Intercept(f(g(h())))`.
func (c *CurrencyRateClient) Intercept(interceptors ...Interceptor) {
	c.inters.CurrencyRate = append(c.inters.CurrencyRate, interceptors...)
}

// Create returns a builder for creating a CurrencyRate entity.
func (c *CurrencyRateClient) Create() *CurrencyRateCreate {
	mutation := newCurrencyRateMutation(c.config, OpCreate)
	return &CurrencyRateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CurrencyRate entities.
func (c *CurrencyRateClient) CreateBulk(builders ...*CurrencyRateCreate) *CurrencyRateCreateBulk {
	return &CurrencyRateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CurrencyRateClient) MapCreateBulk(slice any, setFunc func(*CurrencyRateCreate, int)) *CurrencyRateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CurrencyRateCreateBulk{err: fmt.Errorf("calling to CurrencyRateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CurrencyRateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CurrencyRateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CurrencyRate.
func (c *CurrencyRateClient) Update() *CurrencyRateUpdate {
	mutation := newCurrencyRateMutation(c.config, OpUpdate)
	return &CurrencyRateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CurrencyRateClient) UpdateOne(cr *CurrencyRate) *CurrencyRateUpdateOne {
	mutation := newCurrencyRateMutation(c.config, OpUpdateOne, withCurrencyRate(cr))
	return &CurrencyRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CurrencyRateClient) UpdateOneID(id int) *CurrencyRateUpdateOne {
	mutation := newCurrencyRateMutation(c.config, OpUpdateOne, withCurrencyRateID(id))
	return &CurrencyRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CurrencyRate.
func (c *CurrencyRateClient) Delete() *CurrencyRateDelete {
	mutation := newCurrencyRateMutation(c.config, OpDelete)
	return &CurrencyRateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CurrencyRateClient) DeleteOne(cr *CurrencyRate) *CurrencyRateDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CurrencyRateClient) DeleteOneID(id int) *CurrencyRateDeleteOne {
	builder := c.Delete().Where(currencyrate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CurrencyRateDeleteOne{builder}
}

// Query returns a query builder for CurrencyRate.
func (c *CurrencyRateClient) Query() *CurrencyRateQuery {
	return &CurrencyRateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCurrencyRate},
		inters: c.Interceptors(),
	}
}

// Get returns a CurrencyRate entity by its id.
func (c *CurrencyRateClient) Get(ctx context.Context, id int) (*CurrencyRate, error) {
	return c.Query().Where(currencyrate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CurrencyRateClient) GetX(ctx context.Context, id int) *CurrencyRate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBank queries the bank edge of a CurrencyRate.
func (c *CurrencyRateClient) QueryBank(cr *CurrencyRate) *BankQuery {
	query := (&BankClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(currencyrate.Table, currencyrate.FieldID, id),
			sqlgraph.To(bank.Table, bank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, currencyrate.BankTable, currencyrate.BankColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CurrencyRateClient) Hooks() []Hook {
	return c.hooks.CurrencyRate
}

// Interceptors returns the client interceptors.
func (c *CurrencyRateClient) Interceptors() []Interceptor {
	return c.inters.CurrencyRate
}

func (c *CurrencyRateClient) mutate(ctx context.Context, m *CurrencyRateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CurrencyRateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CurrencyRateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CurrencyRateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CurrencyRateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CurrencyRate mutation op: %q", m.Op())
	}
}

// OfferClient is a client for the Offer schema.
type OfferClient struct {
	config
}

// NewOfferClient returns a client for the Offer from the given config.
func NewOfferClient(c config) *OfferClient {
	return &OfferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `offer.Hooks(f(g(h())))`.
func (c *OfferClient) Use(hooks ...Hook) {
	c.hooks.Offer = append(c.hooks.Offer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `offer.Intercept(f(g(h())))`.
func (c *OfferClient) Intercept(interceptors ...Interceptor) {
	c.inters.Offer = append(c.inters.Offer, interceptors...)
}

// Create returns a builder for creating a Offer entity.
func (c *OfferClient) Create() *OfferCreate {
	mutation := newOfferMutation(c.config, OpCreate)
	return &OfferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Offer entities.
func (c *OfferClient) CreateBulk(builders ...*OfferCreate) *OfferCreateBulk {
	return &OfferCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OfferClient) MapCreateBulk(slice any, setFunc func(*OfferCreate, int)) *OfferCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OfferCreateBulk{err: fmt.Errorf("calling to OfferClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OfferCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OfferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Offer.
func (c *OfferClient) Update() *OfferUpdate {
	mutation := newOfferMutation(c.config, OpUpdate)
	return &OfferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OfferClient) UpdateOne(o *Offer) *OfferUpdateOne {
	mutation := newOfferMutation(c.config, OpUpdateOne, withOffer(o))
	return &OfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OfferClient) UpdateOneID(id int) *OfferUpdateOne {
	mutation := newOfferMutation(c.config, OpUpdateOne, withOfferID(id))
	return &OfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Offer.
func (c *OfferClient) Delete() *OfferDelete {
	mutation := newOfferMutation(c.config, OpDelete)
	return &OfferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OfferClient) DeleteOne(o *Offer) *OfferDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OfferClient) DeleteOneID(id int) *OfferDeleteOne {
	builder := c.Delete().Where(offer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OfferDeleteOne{builder}
}

// Query returns a query builder for Offer.
func (c *OfferClient) Query() *OfferQuery {
	return &OfferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOffer},
		inters: c.Interceptors(),
	}
}

// Get returns a Offer entity by its id.
func (c *OfferClient) Get(ctx context.Context, id int) (*Offer, error) {
	return c.Query().Where(offer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OfferClient) GetX(ctx context.Context, id int) *Offer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBank queries the bank edge of a Offer.
func (c *OfferClient) QueryBank(o *Offer) *BankQuery {
	query := (&BankClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(offer.Table, offer.FieldID, id),
			sqlgraph.To(bank.Table, bank.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, offer.BankTable, offer.BankColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OfferClient) Hooks() []Hook {
	return c.hooks.Offer
}

// Interceptors returns the client interceptors.
func (c *OfferClient) Interceptors() []Interceptor {
	return c.inters.Offer
}

func (c *OfferClient) mutate(ctx context.Context, m *OfferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OfferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OfferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OfferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OfferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Offer mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Bank, CurrencyRate, Offer []ent.Hook
	}
	inters struct {
		Bank, CurrencyRate, Offer []ent.Interceptor
	}
)
